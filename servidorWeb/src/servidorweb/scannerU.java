/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package servidorweb;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.io.Reader;
import java.awt.Color;
import javax.swing.JOptionPane;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>FlexYCup/LexicoU.jflex</tt>
 */
public class scannerU implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO1 = 2;
  public static final int COMENTARIO2 = 4;
  public static final int CADENA = 6;
  public static final int DATE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 56,  2,  4,  4,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 46, 58, 57,  0,  0, 48, 59, 51, 52, 40, 38, 53, 39,  6, 41, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 55, 54, 44, 45, 43,  0, 
     7, 22, 20, 29, 17, 14, 26, 15, 37, 11, 30, 35, 21, 24, 12, 18, 
    31, 33, 16, 28, 13, 19, 25, 32, 23,  8, 36,  0,  0,  0, 42,  9, 
     0, 22, 20, 29, 17, 14, 26, 15, 37, 11, 30, 35, 21, 24, 12, 18, 
    31, 33, 16, 28, 13, 19, 25, 32, 23,  8, 36, 49, 47, 50,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\16\6\1\1\4\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\1\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\1\1\36\1\37\3\0"+
    "\6\6\1\40\2\6\1\41\6\6\1\0\7\6\1\0"+
    "\2\6\1\0\6\6\1\42\1\0\1\42\10\6\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\4\3\0\7\6\1\0\3\6\1\0\4\6"+
    "\1\0\10\6\1\0\1\6\3\0\5\6\1\0\6\6"+
    "\2\55\1\6\1\0\6\6\2\0\7\6\1\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\1\56\1\57"+
    "\1\6\1\0\3\6\1\0\4\6\2\60\3\6\1\61"+
    "\3\6\1\0\1\6\1\0\1\62\1\0\1\6\1\62"+
    "\2\6\1\63\1\0\1\6\1\0\6\6\1\0\5\6"+
    "\1\0\1\6\1\64\1\0\1\64\6\6\2\65\2\6"+
    "\1\66\1\0\1\6\1\0\1\6\3\0\4\6\1\67"+
    "\1\0\3\6\1\0\5\6\1\70\5\6\2\71\2\0"+
    "\3\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0"+
    "\3\6\1\72\1\0\1\6\2\73\1\0\1\6\1\74"+
    "\3\6\1\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\1\0\3\6\1\0\5\6\1\75"+
    "\1\0\3\6\1\76\2\0\2\6\1\77\1\0\1\6"+
    "\2\100\2\6\1\0\3\6\1\0\4\6\1\0\1\6"+
    "\1\0\1\6\1\101\2\6\1\0\1\6\1\0\2\6"+
    "\1\0\1\6\2\102\1\103\2\0\1\103\2\6\1\104"+
    "\1\0\1\6\1\105\1\6\1\0\1\6\1\106\1\107"+
    "\1\110\1\6\1\0\1\6\1\111\1\6\1\112\1\0"+
    "\1\112\1\6\1\0\3\6\1\113\1\0\1\6\1\114"+
    "\1\0\1\6\1\0\2\6\2\115\1\6\2\116\1\0"+
    "\1\6\1\117\1\6\2\120\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\121\1\122\1\121\1\122\2\123\1\6"+
    "\1\0\1\6\1\124\2\125\1\6\2\126\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\127\2\6\1\0\1\6"+
    "\1\130\2\131\1\0\1\6\2\132\1\0\1\6\2\133"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\134\1\6\1\0\1\6\1\0\1\6\2\135"+
    "\1\6\2\136\1\6\1\0\1\6\1\0\1\6\2\137"+
    "\1\140\2\141\1\0\1\6\1\142\1\6\1\0\1\6"+
    "\1\0\1\6\2\143\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\144\1\0\1\6\1\0\1\6"+
    "\2\145\2\146\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\2\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u012c"+
    "\0\u012c\0\u01a4\0\u012c\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u012c\0\u012c\0\u012c\0\u0780\0\u07bc"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u08e8\0\u012c\0\u012c\0\u0924"+
    "\0\u012c\0\u0960\0\u099c\0\u012c\0\u012c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u021c\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u09d8"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u012c\0\u021c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u021c\0\u021c\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u012c\0\u021c\0\u297c\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98"+
    "\0\u012c\0\u2bd4\0\u2c10\0\u021c\0\u2c4c\0\u2c88\0\u021c\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u012c\0\u30c0\0\u021c\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u012c\0\u021c\0\u3264\0\u32a0\0\u021c\0\u32dc\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u021c\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c"+
    "\0\u36d8\0\u3714\0\u3750\0\u378c\0\u021c\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u012c\0\u021c\0\u38f4\0\u3930\0\u396c\0\u39a8"+
    "\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68"+
    "\0\u3da4\0\u3de0\0\u012c\0\u021c\0\u3e1c\0\u3e58\0\u021c\0\u3e94"+
    "\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074"+
    "\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434"+
    "\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u021c\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u021c\0\u4650\0\u468c\0\u46c8\0\u4704\0\u021c\0\u4740"+
    "\0\u477c\0\u012c\0\u021c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8"+
    "\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88"+
    "\0\u4ac4\0\u4b00\0\u021c\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c"+
    "\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u012c\0\u021c\0\u012c\0\u4d58"+
    "\0\u4d94\0\u021c\0\u4dd0\0\u4e0c\0\u021c\0\u4e48\0\u4e84\0\u021c"+
    "\0\u4ec0\0\u4efc\0\u4f38\0\u021c\0\u021c\0\u021c\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u021c\0\u5028\0\u012c\0\u5064\0\u021c\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u021c\0\u51cc\0\u5208\0\u021c\0\u5244"+
    "\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u012c\0\u021c\0\u5370\0\u012c"+
    "\0\u021c\0\u53ac\0\u53e8\0\u021c\0\u5424\0\u012c\0\u021c\0\u5460"+
    "\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c\0\u012c\0\u012c\0\u021c"+
    "\0\u021c\0\u012c\0\u021c\0\u55c8\0\u5604\0\u5640\0\u021c\0\u012c"+
    "\0\u021c\0\u567c\0\u012c\0\u021c\0\u56b8\0\u56f4\0\u5730\0\u576c"+
    "\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u012c\0\u021c\0\u5898\0\u58d4"+
    "\0\u5910\0\u594c\0\u021c\0\u012c\0\u021c\0\u5988\0\u59c4\0\u012c"+
    "\0\u021c\0\u5a00\0\u5a3c\0\u012c\0\u021c\0\u5a78\0\u5ab4\0\u5af0"+
    "\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u021c"+
    "\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u012c\0\u021c\0\u5dfc"+
    "\0\u012c\0\u021c\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u012c"+
    "\0\u021c\0\u021c\0\u5f64\0\u5fa0\0\u5fdc\0\u6018\0\u021c\0\u6054"+
    "\0\u6090\0\u60cc\0\u6108\0\u6144\0\u012c\0\u021c\0\u6180\0\u61bc"+
    "\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u021c"+
    "\0\u639c\0\u63d8\0\u6414\0\u6450\0\u012c\0\u021c\0\u012c\0\u021c"+
    "\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8\0\u012c\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\6\1\16\1\17\1\20\1\21\1\22\1\15"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\15"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\15\1\40"+
    "\1\15\1\41\1\6\3\15\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\2\70\1\71\71\70\51\72\1\73\17\72"+
    "\1\6\2\72\72\74\1\75\1\74\1\6\2\0\1\6"+
    "\1\0\67\6\76\0\1\10\76\0\1\12\1\76\75\0"+
    "\1\15\2\0\20\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\20\15\1\0\6\15\1\0"+
    "\3\15\42\0\1\77\13\0\1\100\50\0\1\15\2\0"+
    "\2\15\1\0\1\15\1\101\13\15\1\102\2\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\103\1\104\7\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\3\15\1\105\7\15"+
    "\1\106\4\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\1\15\1\107\10\15\1\110\5\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\111\14\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\3\15\1\112\3\15"+
    "\1\113\3\15\1\114\4\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\2\15\1\115\2\15"+
    "\1\116\3\15\1\117\6\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\1\15\1\120\16\15"+
    "\1\121\1\122\5\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\7\15\1\123\3\15\1\124\4\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\12\15\1\125\5\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\4\15\1\126\3\15\1\127"+
    "\1\15\1\130\5\15\1\131\1\132\1\133\4\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\134\1\135\17\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\136\7\15\1\137\4\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\140\4\15\1\141\2\15\1\142\4\15\1\0\6\15"+
    "\1\0\3\15\40\0\2\143\2\0\1\144\62\0\1\15"+
    "\2\0\2\15\1\143\1\145\2\15\1\146\14\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\5\15\1\147\1\15\1\150\3\15\1\151\4\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\3\15\1\152\1\15\1\153\5\15\1\154\4\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\10\15\1\155\7\15\1\0\6\15\1\0\3\15\74\0"+
    "\1\156\74\0\1\157\101\0\1\160\73\0\1\161\73\0"+
    "\1\162\73\0\1\163\75\0\1\164\74\0\1\165\64\0"+
    "\1\166\22\0\2\70\1\0\71\70\51\72\1\0\17\72"+
    "\1\0\2\72\71\0\1\167\7\0\1\170\103\0\1\171"+
    "\15\0\2\172\76\0\1\173\41\0\1\15\2\0\2\15"+
    "\1\0\2\15\1\174\15\15\1\172\1\175\5\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\20\15\1\0"+
    "\3\15\1\176\2\15\1\0\3\15\33\0\1\15\2\0"+
    "\1\15\1\177\1\0\20\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\12\15\1\200\5\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\14\15\1\201\3\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\11\15\1\202\6\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\203\1\204\17\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\2\15\1\205\14\15\1\206"+
    "\1\207\1\210\5\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\1\15\1\211\1\212\14\15\1\213\1\214"+
    "\1\215\1\216\4\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\1\15\1\217\6\15\1\220\7\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\2\15\1\221\15\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\7\15\1\222\10\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\6\15\1\223\11\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\20\15\1\0\2\15\1\224"+
    "\3\15\1\0\3\15\33\0\1\15\2\0\2\15\1\225"+
    "\1\226\17\15\1\0\6\15\1\0\3\15\51\0\1\227"+
    "\2\0\1\230\12\0\1\231\37\0\1\15\2\0\2\15"+
    "\1\0\10\15\1\232\2\15\1\233\4\15\1\0\5\15"+
    "\1\234\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\5\15\1\235\1\15\1\236\10\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\20\15\1\237"+
    "\1\240\1\241\4\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\13\15\1\242\4\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\5\15\1\243"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\2\15\1\244\15\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\2\15\1\245"+
    "\15\15\1\0\6\15\1\0\3\15\63\0\1\246\43\0"+
    "\1\15\2\0\2\15\1\0\20\15\1\0\1\15\1\247"+
    "\4\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\2\15\1\250\15\15\1\0\6\15\1\0\3\15\44\0"+
    "\1\251\62\0\1\15\2\0\2\15\1\0\3\15\1\252"+
    "\14\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\5\15\1\253\12\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\12\15\1\254"+
    "\5\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\0\1\15\1\255\4\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\1\15\1\256"+
    "\16\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\12\15\1\257\5\15\1\0\6\15\1\0"+
    "\3\15\42\0\1\260\104\0\1\261\53\0\1\15\2\0"+
    "\2\15\1\0\1\15\1\262\16\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\12\15\1\263"+
    "\5\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\3\15\1\264\14\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\1\15\1\265"+
    "\10\15\1\266\2\15\1\267\2\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\15\15\1\270"+
    "\2\15\1\271\1\272\5\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\273\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\7\15"+
    "\1\274\10\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\275\12\15\1\276\1\277"+
    "\5\15\1\0\3\15\33\0\1\15\2\0\2\15\1\300"+
    "\1\301\17\15\1\0\6\15\1\0\3\15\44\0\1\302"+
    "\73\0\1\303\75\0\1\304\60\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\305\14\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\3\15\1\306\14\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\5\15\1\307\12\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\1\15\1\310\16\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\7\15\1\311\10\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\2\15\1\312\15\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\12\15\1\313\5\15\1\0\6\15\1\0\3\15"+
    "\56\0\1\314\50\0\1\15\2\0\2\15\1\0\15\15"+
    "\1\315\2\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\7\15\1\316\10\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\317\14\15\1\0\6\15\1\0\3\15\43\0\1\320"+
    "\63\0\1\15\2\0\2\15\1\0\2\15\1\321\15\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\322\14\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\3\15\1\323\14\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\324\14\15\1\0\6\15\1\0\3\15"+
    "\63\0\1\325\43\0\1\15\2\0\2\15\1\0\20\15"+
    "\1\0\1\15\1\326\4\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\12\15\1\327\5\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\6\15"+
    "\1\330\11\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\11\15\1\331\6\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\332\14\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\333\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\334\14\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\3\15\1\335\14\15\1\0\6\15"+
    "\1\0\3\15\63\0\1\336\43\0\1\15\2\0\2\15"+
    "\1\0\20\15\1\0\1\15\1\337\4\15\1\0\3\15"+
    "\54\0\1\340\65\0\1\341\100\0\1\342\53\0\1\15"+
    "\2\0\2\15\1\0\13\15\1\343\4\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\344\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\12\15\1\345\5\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\346\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\12\15\1\347\5\15\1\0\6\15"+
    "\1\0\3\15\44\0\1\350\62\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\351\14\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\20\15\1\0\6\15"+
    "\1\352\1\353\2\15\33\0\1\15\2\0\2\15\1\0"+
    "\16\15\1\354\1\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\3\15\1\355\14\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\356\10\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\3\15\1\357\14\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\10\15\1\360\7\15\1\0\6\15\1\0\3\15\42\0"+
    "\1\361\64\0\1\15\2\0\2\15\1\0\1\15\1\362"+
    "\16\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\6\15\1\363\11\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\7\15\1\364"+
    "\10\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\0\6\15\1\0\2\15\1\365"+
    "\33\0\1\15\2\0\2\15\1\0\20\15\1\0\1\15"+
    "\1\366\4\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\20\15\1\367\1\370\5\15\1\0\3\15\50\0"+
    "\1\371\67\0\1\372\62\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\373\10\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\3\15\1\374\14\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\13\15\1\375\4\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\2\15\1\376\15\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\377\10\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\20\15\1\0\3\15\1\u0100"+
    "\2\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\11\15\1\u0101\6\15\1\0\6\15\1\0\3\15\50\0"+
    "\1\u0102\56\0\1\15\2\0\2\15\1\0\7\15\1\u0103"+
    "\10\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\15\15\1\u0104\2\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\20\15\1\0"+
    "\1\15\1\u0105\4\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\13\15\1\u0106\4\15\1\0\6\15\1\0"+
    "\3\15\61\0\2\u0107\44\0\1\15\2\0\2\15\1\0"+
    "\20\15\1\u0107\1\u0108\5\15\1\0\3\15\43\0\1\u0109"+
    "\63\0\1\15\2\0\2\15\1\0\2\15\1\u010a\15\15"+
    "\1\0\6\15\1\0\3\15\45\0\1\u010b\74\0\1\u010c"+
    "\65\0\2\u010d\65\0\1\15\2\0\2\15\1\0\4\15"+
    "\1\u010e\13\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u010f\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\u010d\1\u0110"+
    "\17\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\10\15\1\u0111\7\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\13\15\1\u0112"+
    "\4\15\1\0\6\15\1\0\3\15\40\0\2\u0113\65\0"+
    "\1\15\2\0\2\15\1\u0113\1\u0114\17\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u0115\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u0116\12\15\1\0\6\15"+
    "\1\0\3\15\54\0\1\u0117\52\0\1\15\2\0\2\15"+
    "\1\0\13\15\1\u0118\4\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\4\15\1\u0119\13\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\1\15\1\u011a\16\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\20\15\1\0\1\15"+
    "\1\u011b\4\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\13\15\1\u011c\4\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\3\15\1\u011d\14\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\12\15\1\u011e\5\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\2\15\1\u011f\15\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\4\15\1\u0120\13\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\1\15\1\u0121\16\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\2\15\1\u0122\15\15\1\0\6\15\1\0\3\15"+
    "\50\0\1\u0123\56\0\1\15\2\0\2\15\1\0\7\15"+
    "\1\u0124\10\15\1\0\6\15\1\0\3\15\46\0\1\u0125"+
    "\74\0\1\u0126\57\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u0127\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\6\15\1\u0128\11\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\13\15"+
    "\1\u0129\4\15\1\0\6\15\1\0\3\15\37\0\1\u012a"+
    "\67\0\1\15\2\0\1\15\1\u012b\1\0\20\15\1\0"+
    "\6\15\1\0\3\15\51\0\1\u012c\55\0\1\15\2\0"+
    "\2\15\1\0\10\15\1\u012d\7\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\3\15\1\u012e"+
    "\14\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\4\15\1\u012f\13\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\u0130\1\u0131\17\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\5\15\1\u0132\12\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\13\15\1\u0133\4\15"+
    "\1\0\6\15\1\0\3\15\43\0\1\u0134\63\0\1\15"+
    "\2\0\2\15\1\0\2\15\1\u0135\15\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\13\15"+
    "\1\u0136\4\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u0137\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\13\15"+
    "\1\u0138\4\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\u0139\1\u013a\17\15\1\0\6\15\1\0"+
    "\3\15\50\0\1\u013b\56\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\u013c\10\15\1\0\6\15\1\0\3\15\63\0"+
    "\1\u013d\43\0\1\15\2\0\2\15\1\0\20\15\1\0"+
    "\1\15\1\u013e\4\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\5\15\1\u013f\12\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\13\15\1\u0140"+
    "\4\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\0\1\15\1\u0141\4\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\12\15\1\u0142"+
    "\5\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\u0143\1\u0144\17\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\u0145\1\u0146\17\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\3\15\1\u0147\14\15\1\0\6\15\1\0\3\15\66\0"+
    "\1\u0148\40\0\1\15\2\0\2\15\1\0\20\15\1\0"+
    "\4\15\1\u0149\1\15\1\0\3\15\54\0\1\u014a\52\0"+
    "\1\15\2\0\2\15\1\0\13\15\1\u014b\4\15\1\0"+
    "\6\15\1\0\3\15\44\0\1\u014c\72\0\1\u014d\106\0"+
    "\1\u014e\50\0\1\15\2\0\2\15\1\0\3\15\1\u014f"+
    "\14\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\2\15\1\u0150\15\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\15\15\1\u0151"+
    "\2\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\12\15\1\u0152\5\15\1\0\6\15\1\0"+
    "\3\15\42\0\1\u0153\64\0\1\15\2\0\2\15\1\0"+
    "\1\15\1\u0154\16\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\1\15\1\u0155\16\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\3\15\1\u0156\14\15\1\0\6\15\1\0\3\15\51\0"+
    "\1\u0157\55\0\1\15\2\0\2\15\1\0\10\15\1\u0158"+
    "\7\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\13\15\1\u0159\4\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\3\15\1\u015a"+
    "\14\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\2\15\1\u015b\15\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\5\15\1\u015c"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\3\15\1\u015d\14\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\u015e\1\u015f\17\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\13\15\1\u0160\4\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\13\15\1\u0161\4\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\7\15\1\u0162\10\15\1\0\6\15\1\0\3\15"+
    "\40\0\2\u0163\103\0\1\u0164\55\0\1\15\2\0\2\15"+
    "\1\u0163\1\u0165\17\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\10\15\1\u0166\7\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\5\15\1\u0167\12\15\1\0\6\15\1\0\3\15\47\0"+
    "\1\u0168\57\0\1\15\2\0\2\15\1\0\6\15\1\u0169"+
    "\11\15\1\0\6\15\1\0\3\15\65\0\1\u016a\41\0"+
    "\1\15\2\0\2\15\1\0\20\15\1\0\3\15\1\u016b"+
    "\2\15\1\0\3\15\33\0\1\15\2\0\1\15\1\u016c"+
    "\1\0\20\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\13\15\1\u016d\4\15\1\0\6\15"+
    "\1\0\3\15\42\0\1\u016e\64\0\1\15\2\0\2\15"+
    "\1\0\1\15\1\u016f\16\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\13\15\1\u0170\4\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\12\15\1\u0171\5\15\1\0\6\15\1\0\3\15"+
    "\46\0\1\u0172\60\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u0173\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\6\15\1\u0174\11\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\u0175\14\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\1\15\1\u0176\1\0\20\15\1\0\6\15\1\0"+
    "\3\15\50\0\1\u0177\56\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\u0178\10\15\1\0\6\15\1\0\3\15\63\0"+
    "\1\u0179\43\0\1\15\2\0\2\15\1\0\20\15\1\0"+
    "\1\15\1\u017a\4\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\5\15\1\u017b\12\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\13\15\1\u017c"+
    "\4\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\3\15\1\u017d\14\15\1\0\6\15\1\0"+
    "\3\15\54\0\1\u017e\52\0\1\15\2\0\2\15\1\0"+
    "\13\15\1\u017f\4\15\1\0\6\15\1\0\3\15\61\0"+
    "\2\u0180\44\0\1\15\2\0\2\15\1\0\20\15\1\u0180"+
    "\1\u0181\5\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\6\15\1\u0182\11\15\1\0\6\15\1\0\3\15"+
    "\50\0\1\u0183\56\0\1\15\2\0\2\15\1\0\7\15"+
    "\1\u0184\10\15\1\0\6\15\1\0\3\15\46\0\1\u0185"+
    "\60\0\1\15\2\0\2\15\1\0\5\15\1\u0186\12\15"+
    "\1\0\6\15\1\0\3\15\46\0\1\u0187\101\0\1\u0188"+
    "\57\0\2\u0189\65\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u018a\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\13\15\1\u018b\4\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\u0189\1\u018c"+
    "\17\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\7\15\1\u018d\10\15\1\0\6\15\1\0"+
    "\3\15\54\0\1\u018e\52\0\1\15\2\0\2\15\1\0"+
    "\13\15\1\u018f\4\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\7\15\1\u0190\10\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\1\15\1\u0191\16\15\1\0\6\15\1\0\3\15\46\0"+
    "\1\u0192\60\0\1\15\2\0\2\15\1\0\5\15\1\u0193"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\5\15\1\u0194\12\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\5\15\1\u0195"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\7\15\1\u0196\10\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\13\15\1\u0197"+
    "\4\15\1\0\6\15\1\0\3\15\56\0\1\u0198\50\0"+
    "\1\15\2\0\2\15\1\0\15\15\1\u0199\2\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\5\15\1\u019a\12\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\5\15\1\u019b\12\15\1\0"+
    "\6\15\1\0\3\15\50\0\1\u019c\101\0\1\u019d\50\0"+
    "\1\15\2\0\2\15\1\0\7\15\1\u019e\10\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\15\15\1\u019f\2\15\1\0\6\15\1\0\3\15\54\0"+
    "\1\u01a0\52\0\1\15\2\0\2\15\1\0\13\15\1\u01a1"+
    "\4\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\17\15\1\u01a2\1\0\3\15\1\u01a3\2\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u01a4\12\15\1\0\6\15\1\0\3\15\63\0\1\u01a5"+
    "\43\0\1\15\2\0\2\15\1\0\20\15\1\0\1\15"+
    "\1\u01a6\4\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\5\15\1\u01a7\12\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\u01a8\1\u01a9\17\15\1\0"+
    "\6\15\1\0\3\15\54\0\1\u01aa\52\0\1\15\2\0"+
    "\2\15\1\0\13\15\1\u01ab\4\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\3\15\1\u01ac"+
    "\14\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\u01ad\1\u01ae\5\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\20\15\1\0\6\15"+
    "\1\0\2\15\1\u01af\42\0\1\u01b0\64\0\1\15\2\0"+
    "\2\15\1\0\1\15\1\u01b1\16\15\1\0\6\15\1\0"+
    "\3\15\40\0\2\u01b2\65\0\1\15\2\0\2\15\1\u01b2"+
    "\1\u01b3\17\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u01b4\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\2\15"+
    "\1\u01b5\15\15\1\0\6\15\1\0\3\15\46\0\1\u01b6"+
    "\60\0\1\15\2\0\2\15\1\0\5\15\1\u01b7\12\15"+
    "\1\0\6\15\1\0\3\15\50\0\1\u01b8\56\0\1\15"+
    "\2\0\2\15\1\0\7\15\1\u01b9\10\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\u01ba\1\u01bb"+
    "\17\15\1\0\6\15\1\0\3\15\46\0\1\u01bc\60\0"+
    "\1\15\2\0\2\15\1\0\5\15\1\u01bd\12\15\1\0"+
    "\6\15\1\0\3\15\46\0\1\u01be\73\0\1\u01bf\60\0"+
    "\1\15\2\0\2\15\1\0\5\15\1\u01c0\12\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\5\15\1\u01c1\12\15\1\0\6\15\1\0\3\15\46\0"+
    "\1\u01c2\60\0\1\15\2\0\2\15\1\0\5\15\1\u01c3"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\0\1\15\1\u01c4\4\15\1\0"+
    "\3\15\54\0\1\u01c5\52\0\1\15\2\0\2\15\1\0"+
    "\13\15\1\u01c6\4\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\5\15\1\u01c7\12\15\1\0"+
    "\6\15\1\0\3\15\44\0\1\u01c8\62\0\1\15\2\0"+
    "\2\15\1\0\3\15\1\u01c9\14\15\1\0\6\15\1\0"+
    "\3\15\33\0\1\15\2\0\1\15\1\u01ca\1\0\20\15"+
    "\1\0\6\15\1\0\3\15\65\0\1\u01cb\41\0\1\15"+
    "\2\0\2\15\1\0\20\15\1\0\3\15\1\u01cc\2\15"+
    "\1\0\3\15\43\0\1\u01cd\63\0\1\15\2\0\2\15"+
    "\1\0\2\15\1\u01ce\15\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\7\15\1\u01cf\10\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\5\15\1\u01d0\12\15\1\0\6\15\1\0\3\15"+
    "\46\0\1\u01d1\60\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u01d2\12\15\1\0\6\15\1\0\3\15\72\0\1\u01d3"+
    "\34\0\1\15\2\0\2\15\1\0\20\15\1\0\6\15"+
    "\1\0\1\15\1\u01d4\1\15\61\0\2\u01d5\44\0\1\15"+
    "\2\0\2\15\1\0\20\15\1\u01d5\1\u01d6\5\15\1\0"+
    "\3\15\33\0\1\15\2\0\2\15\1\0\5\15\1\u01d7"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\7\15\1\u01d8\10\15\1\0\6\15\1\0"+
    "\3\15\50\0\1\u01d9\56\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\u01da\10\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\7\15\1\u01db\10\15\1\0"+
    "\6\15\1\0\3\15\61\0\2\u01dc\44\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\u01dc\1\u01dd\5\15\1\0\3\15"+
    "\56\0\1\u01de\50\0\1\15\2\0\2\15\1\0\15\15"+
    "\1\u01df\2\15\1\0\6\15\1\0\3\15\47\0\1\u01e0"+
    "\57\0\1\15\2\0\2\15\1\0\6\15\1\u01e1\11\15"+
    "\1\0\6\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\u01e2\1\u01e3\17\15\1\0\6\15\1\0\3\15\46\0"+
    "\1\u01e4\60\0\1\15\2\0\2\15\1\0\5\15\1\u01e5"+
    "\12\15\1\0\6\15\1\0\3\15\33\0\1\15\2\0"+
    "\2\15\1\0\20\15\1\0\3\15\1\u01e6\2\15\1\0"+
    "\3\15\50\0\1\u01e7\56\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\u01e8\10\15\1\0\6\15\1\0\3\15\33\0"+
    "\1\15\2\0\2\15\1\0\5\15\1\u01e9\12\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\u01ea"+
    "\1\u01eb\17\15\1\0\6\15\1\0\3\15\44\0\1\u01ec"+
    "\62\0\1\15\2\0\2\15\1\0\3\15\1\u01ed\14\15"+
    "\1\0\6\15\1\0\3\15\54\0\1\u01ee\52\0\1\15"+
    "\2\0\2\15\1\0\13\15\1\u01ef\4\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\7\15"+
    "\1\u01f0\10\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u01f1\12\15\1\0\6\15"+
    "\1\0\3\15\42\0\1\u01f2\64\0\1\15\2\0\2\15"+
    "\1\0\1\15\1\u01f3\16\15\1\0\6\15\1\0\3\15"+
    "\40\0\2\u01f4\65\0\1\15\2\0\2\15\1\u01f4\1\u01f5"+
    "\17\15\1\0\6\15\1\0\3\15\54\0\1\u01f6\52\0"+
    "\1\15\2\0\2\15\1\0\13\15\1\u01f7\4\15\1\0"+
    "\6\15\1\0\3\15\33\0\1\15\2\0\2\15\1\0"+
    "\7\15\1\u01f8\10\15\1\0\6\15\1\0\3\15\61\0"+
    "\2\u01f9\44\0\1\15\2\0\2\15\1\0\20\15\1\u01f9"+
    "\1\u01fa\5\15\1\0\3\15\33\0\1\15\2\0\2\15"+
    "\1\0\13\15\1\u01fb\4\15\1\0\6\15\1\0\3\15"+
    "\56\0\1\u01fc\50\0\1\15\2\0\2\15\1\0\15\15"+
    "\1\u01fd\2\15\1\0\6\15\1\0\3\15\56\0\1\u01fe"+
    "\50\0\1\15\2\0\2\15\1\0\15\15\1\u01ff\2\15"+
    "\1\0\6\15\1\0\3\15\46\0\1\u0200\60\0\1\15"+
    "\2\0\2\15\1\0\5\15\1\u0201\12\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\13\15"+
    "\1\u0202\4\15\1\0\6\15\1\0\3\15\54\0\1\u0203"+
    "\52\0\1\15\2\0\2\15\1\0\13\15\1\u0204\4\15"+
    "\1\0\6\15\1\0\3\15\44\0\1\u0205\62\0\1\15"+
    "\2\0\2\15\1\0\3\15\1\u0206\14\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\5\15"+
    "\1\u0207\12\15\1\0\6\15\1\0\3\15\33\0\1\15"+
    "\2\0\2\15\1\0\1\15\1\u0208\16\15\1\0\6\15"+
    "\1\0\3\15\54\0\1\u0209\52\0\1\15\2\0\2\15"+
    "\1\0\13\15\1\u020a\4\15\1\0\6\15\1\0\3\15"+
    "\44\0\1\u020b\62\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\u020c\14\15\1\0\6\15\1\0\3\15\46\0\1\u020d"+
    "\60\0\1\15\2\0\2\15\1\0\5\15\1\u020e\12\15"+
    "\1\0\6\15\1\0\3\15\42\0\1\u020f\64\0\1\15"+
    "\2\0\2\15\1\0\1\15\1\u0210\16\15\1\0\6\15"+
    "\1\0\3\15\33\0\1\15\2\0\2\15\1\0\3\15"+
    "\1\u0211\14\15\1\0\6\15\1\0\3\15\46\0\1\u0212"+
    "\60\0\1\15\2\0\2\15\1\0\5\15\1\u0213\12\15"+
    "\1\0\6\15\1\0\3\15\42\0\1\u0214\64\0\1\15"+
    "\2\0\2\15\1\0\1\15\1\u0215\16\15\1\0\6\15"+
    "\1\0\3\15\43\0\1\u0216\63\0\1\15\2\0\2\15"+
    "\1\0\2\15\1\u0217\15\15\1\0\6\15\1\0\3\15"+
    "\33\0\1\15\2\0\2\15\1\0\13\15\1\u0218\4\15"+
    "\1\0\6\15\1\0\3\15\40\0\2\u0219\65\0\1\15"+
    "\2\0\2\15\1\u0219\1\u021a\17\15\1\0\6\15\1\0"+
    "\3\15\43\0\1\u021b\63\0\1\15\2\0\2\15\1\0"+
    "\2\15\1\u021c\15\15\1\0\6\15\1\0\3\15\50\0"+
    "\1\u021d\56\0\1\15\2\0\2\15\1\0\7\15\1\u021e"+
    "\10\15\1\0\6\15\1\0\3\15\54\0\1\u021f\52\0"+
    "\1\15\2\0\2\15\1\0\13\15\1\u0220\4\15\1\0"+
    "\6\15\1\0\3\15\54\0\1\u0221\52\0\1\15\2\0"+
    "\2\15\1\0\13\15\1\u0222\4\15\1\0\6\15\1\0"+
    "\3\15\52\0\1\u0223\54\0\1\15\2\0\2\15\1\0"+
    "\11\15\1\u0224\6\15\1\0\6\15\1\0\3\15\53\0"+
    "\1\u0225\53\0\1\15\2\0\2\15\1\0\12\15\1\u0226"+
    "\5\15\1\0\6\15\1\0\3\15\44\0\1\u0227\62\0"+
    "\1\15\2\0\2\15\1\0\3\15\1\u0228\14\15\1\0"+
    "\6\15\1\0\3\15\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\1\1\1\11\30\1\3\11"+
    "\6\1\10\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\3\0\20\1\1\0\7\1\1\0\2\1\1\0\7\1"+
    "\1\0\11\1\12\11\1\1\3\0\7\1\1\0\3\1"+
    "\1\0\4\1\1\0\10\1\1\0\1\1\3\0\5\1"+
    "\1\0\6\1\1\11\2\1\1\0\6\1\2\0\7\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\3\0\7\1"+
    "\1\0\3\1\1\0\4\1\1\11\10\1\1\0\1\1"+
    "\1\0\1\11\1\0\5\1\1\0\1\1\1\0\6\1"+
    "\1\0\5\1\1\0\1\1\1\11\1\0\7\1\1\11"+
    "\4\1\1\0\1\1\1\0\1\1\3\0\5\1\1\0"+
    "\3\1\1\0\13\1\1\11\1\1\2\0\3\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\4\1\1\0"+
    "\1\1\1\11\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\3\0\4\1\1\0"+
    "\3\1\1\0\6\1\1\0\4\1\2\0\3\1\1\0"+
    "\1\1\1\11\3\1\1\0\3\1\1\0\4\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\11\2\0\4\1\1\0\3\1"+
    "\1\0\5\1\1\0\3\1\1\11\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\2\1\1\11"+
    "\2\1\1\11\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\11\2\1\1\11"+
    "\2\1\1\0\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\3\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String cadena="";
    public static int linea = 0;
    public static int columna = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerU(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerU(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { String errLex = "Error léxico, DATE irreconocible: '"+yytext()+"' en la línea: "+(linea+1)+" y columna: "+yycolumn;
        System.err.println(errLex);
          }
        case 104: break;
        case 2: 
          { columna = 0; linea += 1;
          }
        case 105: break;
        case 3: 
          { columna += 1;
          }
        case 106: break;
        case 4: 
          { columna += new String(yytext()).length();return new Symbol(symU.NUMERO,columna, linea, new String(yytext()));
          }
        case 107: break;
        case 5: 
          { columna += 1;return new Symbol(symU.PUNTO,columna,linea,".");
          }
        case 108: break;
        case 6: 
          { columna += new String(yytext()).length();return new Symbol(symU.ID,columna, linea, new String(yytext()));
          }
        case 109: break;
        case 7: 
          { columna += 1;return new Symbol(symU.MAS,columna,linea,"+");
          }
        case 110: break;
        case 8: 
          { columna += 1;return new Symbol(symU.MENOS,columna,linea,"-");
          }
        case 111: break;
        case 9: 
          { columna += 1;return new Symbol(symU.POR,columna,linea,"*");
          }
        case 112: break;
        case 10: 
          { columna += 1;return new Symbol(symU.DIV,columna,linea,"/");
          }
        case 113: break;
        case 11: 
          { columna += 1;return new Symbol(symU.POT,columna,linea,"^");
          }
        case 114: break;
        case 12: 
          { columna += 1;return new Symbol(symU.MAYOR,columna,linea,">");
          }
        case 115: break;
        case 13: 
          { columna += 1;return new Symbol(symU.MENOR,columna,linea,"<");
          }
        case 116: break;
        case 14: 
          { columna += 1;return new Symbol(symU.IGUAL,columna,linea,"=");
          }
        case 117: break;
        case 15: 
          { columna += 1;return new Symbol(symU.NOT,columna,linea,"!");
          }
        case 118: break;
        case 16: 
          { columna += 1;return new Symbol(symU.LLA1,columna,linea,"{");
          }
        case 119: break;
        case 17: 
          { columna += 1;return new Symbol(symU.LLA2,columna,linea,"}");
          }
        case 120: break;
        case 18: 
          { columna += 1;return new Symbol(symU.PAR1,columna,linea,"(");
          }
        case 121: break;
        case 19: 
          { columna += 1;return new Symbol(symU.PAR2,columna,linea,")");
          }
        case 122: break;
        case 20: 
          { columna += 1;return new Symbol(symU.COMA,columna,linea,",");
          }
        case 123: break;
        case 21: 
          { columna += 1;return new Symbol(symU.PUNTOYCOMA,columna,linea,"?");
          }
        case 124: break;
        case 22: 
          { columna += 1;return new Symbol(symU.DOSPUNTOS,columna,linea,":");
          }
        case 125: break;
        case 23: 
          { columna += 4;
          }
        case 126: break;
        case 24: 
          { cadena = "";yybegin(COMENTARIO1);
          }
        case 127: break;
        case 25: 
          { cadena = ""; yybegin(CADENA);
          }
        case 128: break;
        case 26: 
          { cadena = ""; yybegin(DATE);
          }
        case 129: break;
        case 27: 
          { /**/
          }
        case 130: break;
        case 28: 
          { columna = 0; linea += 1; yybegin(YYINITIAL);
          }
        case 131: break;
        case 29: 
          { cadena += yytext();
          }
        case 132: break;
        case 30: 
          { cadena+=yytext();
          }
        case 133: break;
        case 31: 
          { String temporal=cadena; cadena=""; yybegin(YYINITIAL);columna += temporal.length()+2;return new Symbol(symU.CADENA,columna,linea, temporal);
          }
        case 134: break;
        case 32: 
          { columna += 3;return new Symbol(symU.EN,columna,linea,new String(yytext()));
          }
        case 135: break;
        case 33: 
          { columna += 3;return new Symbol(symU.DE,columna,linea,new String(yytext()));
          }
        case 136: break;
        case 34: 
          { columna += 2;return new Symbol(symU.SI,columna,linea,new String(yytext()));
          }
        case 137: break;
        case 35: 
          { columna += 2;return new Symbol(symU.MASMAS,columna,linea,"++");
          }
        case 138: break;
        case 36: 
          { columna += 2;return new Symbol(symU.MENOSMENOS,columna,linea,"--");
          }
        case 139: break;
        case 37: 
          { columna += 2;return new Symbol(symU.MAYORIGUAL,columna,linea,">=");
          }
        case 140: break;
        case 38: 
          { columna += 2;return new Symbol(symU.MENORIGUAL,columna,linea,"<=");
          }
        case 141: break;
        case 39: 
          { columna += 2;return new Symbol(symU.IGUALIGUAL,columna,linea,"==");
          }
        case 142: break;
        case 40: 
          { columna += 2;return new Symbol(symU.NOIGUAL,columna,linea,"!=");
          }
        case 143: break;
        case 41: 
          { columna += 2;return new Symbol(symU.OR,columna,linea,"||");
          }
        case 144: break;
        case 42: 
          { columna += 2;return new Symbol(symU.AND,columna,linea,"&&");
          }
        case 145: break;
        case 43: 
          { cadena = "";yybegin(COMENTARIO2);
          }
        case 146: break;
        case 44: 
          { int x = cadena.length();
            for(int i = 0;i<x;i++){
                if(cadena.charAt(i) == '\n'){
                    linea += 1;
                }
            }
			yybegin(YYINITIAL);
          }
        case 147: break;
        case 45: 
          { columna += 3;return new Symbol(symU.ASC,columna,linea,new String(yytext()));
          }
        case 148: break;
        case 46: 
          { columna += 10;return new Symbol(symU.NULO,columna,linea,new String(yytext()));
          }
        case 149: break;
        case 47: 
          { columna += 6;return new Symbol(symU.TEXT,columna,linea,new String(yytext()));
          }
        case 150: break;
        case 48: 
          { columna += 3;return new Symbol(symU.DESC,columna,linea,new String(yytext()));
          }
        case 151: break;
        case 49: 
          { columna += 8;return new Symbol(symU.DATE,columna,linea,new String(yytext()));
          }
        case 152: break;
        case 50: 
          { columna += 3;return new Symbol(symU.USAR,columna,linea,new String(yytext()));
          }
        case 153: break;
        case 51: 
          { columna += 4;return new Symbol(symU.BOOL,columna,linea,new String(yytext()));
          }
        case 154: break;
        case 52: 
          { columna += 4;return new Symbol(symU.SINO,columna,linea,new String(yytext()));
          }
        case 155: break;
        case 53: 
          { columna += 4;return new Symbol(symU.CASO,columna,linea,new String(yytext()));
          }
        case 156: break;
        case 54: 
          { columna += 4;return new Symbol(symU.PARA,columna,linea,new String(yytext()));
          }
        case 157: break;
        case 55: 
          { columna += 10;return new Symbol(symU.TABLA,columna,linea,new String(yytext()));
          }
        case 158: break;
        case 56: 
          { columna += 3;return new Symbol(symU.DONDE,columna,linea,new String(yytext()));
          }
        case 159: break;
        case 57: 
          { columna += 3;return new Symbol(symU.UNICO,columna,linea,new String(yytext()));
          }
        case 160: break;
        case 58: 
          { columna += 3;return new Symbol(symU.FECHA,columna,linea,new String(yytext()));
          }
        case 161: break;
        case 59: 
          { columna += 5;return new Symbol(symU.FALSO,columna,linea,new String(yytext()));
          }
        case 162: break;
        case 60: 
          { columna += 7;return new Symbol(symU.CREAR,columna,linea,new String(yytext()));
          }
        case 163: break;
        case 61: 
          { columna += 7;return new Symbol(symU.DOUBLE,columna,linea,new String(yytext()));
          }
        case 164: break;
        case 62: 
          { columna += 8;return new Symbol(symU.OBJETO,columna,linea,new String(yytext()));
          }
        case 165: break;
        case 63: 
          { columna += 3;return new Symbol(symU.BORRAR,columna,linea,new String(yytext()));
          }
        case 166: break;
        case 64: 
          { columna += 3;return new Symbol(symU.BACKUP,columna,linea,new String(yytext()));
          }
        case 167: break;
        case 65: 
          { columna += 3;return new Symbol(symU.CONTAR,columna,linea,new String(yytext()));
          }
        case 168: break;
        case 66: 
          { columna += 3;return new Symbol(symU.QUITAR,columna,linea,new String(yytext()));
          }
        case 169: break;
        case 67: 
          { columna += 6;return new Symbol(symU.INTEGER,columna,linea,new String(yytext()));
          }
        case 170: break;
        case 68: 
          { columna += 8;return new Symbol(symU.NO_NULO,columna,linea,new String(yytext()));
          }
        case 171: break;
        case 69: 
          { columna += 3;return new Symbol(symU.RETORNO,columna,linea,new String(yytext()));
          }
        case 172: break;
        case 70: 
          { columna += 3;return new Symbol(symU.DENEGAR,columna,linea,new String(yytext()));
          }
        case 173: break;
        case 71: 
          { columna += 8;return new Symbol(symU.DETENER,columna,linea,new String(yytext()));
          }
        case 174: break;
        case 72: 
          { columna += 7;return new Symbol(symU.DEFECTO,columna,linea,new String(yytext()));
          }
        case 175: break;
        case 73: 
          { columna += 3;return new Symbol(symU.OTORGAR,columna,linea,new String(yytext()));
          }
        case 176: break;
        case 74: 
          { columna += 8;return new Symbol(symU.USUARIO,columna,linea,new String(yytext()));
          }
        case 177: break;
        case 75: 
          { columna += 3;return new Symbol(symU.AGREGAR,columna,linea,new String(yytext()));
          }
        case 178: break;
        case 76: 
          { columna += 3;return new Symbol(symU.ALTERAR,columna,linea,new String(yytext()));
          }
        case 179: break;
        case 77: 
          { columna += 3;return new Symbol(symU.VALORES,columna,linea,new String(yytext()));
          }
        case 180: break;
        case 78: 
          { columna += 5;return new Symbol(symU.FUNCION,columna,linea,new String(yytext()));
          }
        case 181: break;
        case 79: 
          { columna += 8;return new Symbol(symU.COLOCAR,columna,linea,new String(yytext()));
          }
        case 182: break;
        case 80: 
          { columna += 3;return new Symbol(symU.CAMBIAR,columna,linea,new String(yytext()));
          }
        case 183: break;
        case 81: 
          { columna += 3;return new Symbol(symU.INSERTAR,columna,linea,new String(yytext()));
          }
        case 184: break;
        case 82: 
          { columna += 9;return new Symbol(symU.IMPRIMIR,columna,linea,new String(yytext()));
          }
        case 185: break;
        case 83: 
          { columna += 3;return new Symbol(symU.ELIMINAR,columna,linea,new String(yytext()));
          }
        case 186: break;
        case 84: 
          { columna += 3;return new Symbol(symU.DECLARAR,columna,linea,new String(yytext()));
          }
        case 187: break;
        case 85: 
          { columna += 3;return new Symbol(symU.DATETIME,columna,linea,new String(yytext()));
          }
        case 188: break;
        case 86: 
          { columna += 3;return new Symbol(symU.USQLDUMP,columna,linea,new String(yytext()));
          }
        case 189: break;
        case 87: 
          { columna += 8;return new Symbol(symU.MIENTRAS,columna,linea,new String(yytext()));
          }
        case 190: break;
        case 88: 
          { columna += 3;return new Symbol(symU.COMPLETO,columna,linea,new String(yytext()));
          }
        case 191: break;
        case 89: 
          { columna += 3;return new Symbol(symU.PERMISOS,columna,linea,new String(yytext()));
          }
        case 192: break;
        case 90: 
          { columna += 6;return new Symbol(symU.PASSWORD,columna,linea,new String(yytext()));
          }
        case 193: break;
        case 91: 
          { columna += 3;return new Symbol(symU.RESTAURAR,columna,linea,new String(yytext()));
          }
        case 194: break;
        case 92: 
          { columna += 9;return new Symbol(symU.VERDADERO,columna,linea,new String(yytext()));
          }
        case 195: break;
        case 93: 
          { columna += 3;return new Symbol(symU.REFERENCIA,columna,linea,new String(yytext()));
          }
        case 196: break;
        case 94: 
          { columna += 7;return new Symbol(symU.BASE_DATOS,columna,linea,new String(yytext()));
          }
        case 197: break;
        case 95: 
          { columna += 3;return new Symbol(symU.ACTUALIZAR,columna,linea,new String(yytext()));
          }
        case 198: break;
        case 96: 
          { columna += 3;return new Symbol(symU.FECHA_HORA,columna,linea,new String(yytext()));
          }
        case 199: break;
        case 97: 
          { columna += 9;return new Symbol(symU.SELECCIONA,columna,linea,new String(yytext()));
          }
        case 200: break;
        case 98: 
          { columna += 3;return new Symbol(symU.ORDENAR_POR,columna,linea,new String(yytext()));
          }
        case 201: break;
        case 99: 
          { columna += 3;return new Symbol(symU.SELECCIONAR,columna,linea,new String(yytext()));
          }
        case 202: break;
        case 100: 
          { columna += 3;return new Symbol(symU.LLAVE_FORANEA,columna,linea,new String(yytext()));
          }
        case 203: break;
        case 101: 
          { columna += 6;return new Symbol(symU.PROCEDIMIENTO,columna,linea,new String(yytext()));
          }
        case 204: break;
        case 102: 
          { columna += 3;return new Symbol(symU.LLAVE_PRIMARIA,columna,linea,new String(yytext()));
          }
        case 205: break;
        case 103: 
          { columna += 3;return new Symbol(symU.AUTOINCREMENTABLE,columna,linea,new String(yytext()));
          }
        case 206: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(symU.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
