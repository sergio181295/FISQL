
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 21 07:42:47 CST 2017
//----------------------------------------------------

package servidorweb;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import java.io.FileReader;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 21 07:42:47 CST 2017
  */
public class parserU extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserU() {super();}

  /** Constructor which sets the default scanner. */
  public parserU(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserU(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\011" +
    "\004\000\002\017\005\000\002\017\010\000\002\017\010" +
    "\000\002\017\011\000\002\017\013\000\002\017\011\000" +
    "\002\020\006\000\002\020\004\000\002\020\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\005\000\002\021\003\000\002\012\005" +
    "\000\002\013\004\000\002\022\006\000\002\022\006\000" +
    "\002\022\011\000\002\023\006\000\002\023\004\000\002" +
    "\014\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\015\007\000\002\025\003" +
    "\000\002\025\003\000\002\016\006\000\002\026\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\027\010\000\002\030\007\000\002\030" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\014" +
    "\000\002\032\005\000\002\032\004\000\002\032\006\000" +
    "\002\033\006\000\002\033\005\000\002\033\004\000\002" +
    "\033\006\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\007\003\000\002\007\003" +
    "\000\002\036\012\000\002\037\012\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\040\005\000\002\040\005\000\002\041\005\000" +
    "\002\041\003\000\002\042\006\000\002\043\007\000\002" +
    "\043\011\000\002\044\011\000\002\045\004\000\002\045" +
    "\003\000\002\046\006\000\002\046\005\000\002\047\021" +
    "\000\002\050\003\000\002\050\003\000\002\051\011\000" +
    "\002\052\004\000\002\053\007\000\002\054\006\000\002" +
    "\055\006\000\002\056\013\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\004\000" +
    "\002\060\004\000\002\060\005\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\061\006" +
    "\000\002\061\005\000\002\061\005\000\002\061\003\000" +
    "\002\062\005\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\062\014\023\033\021\034\014\040\006\041" +
    "\042\042\035\045\037\046\054\052\005\053\043\055\034" +
    "\061\024\062\041\064\032\066\015\070\050\073\062\074" +
    "\030\075\052\076\013\077\022\100\061\101\016\133\036" +
    "\001\002\000\072\002\ufffa\014\ufffa\033\ufffa\034\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\061\ufffa\062\ufffa\064\ufffa\066\ufffa\070\ufffa\071" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\100\ufffa\101\ufffa\126\ufffa\133\ufffa\001\002\000\004\016" +
    "\u0158\001\002\000\012\015\u014e\016\u014f\017\u014d\022\u014c" +
    "\001\002\000\072\002\ufff6\014\ufff6\033\ufff6\034\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\045\ufff6\046\ufff6\052\ufff6\053\ufff6" +
    "\055\ufff6\061\ufff6\062\ufff6\064\ufff6\066\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6" +
    "\100\ufff6\101\ufff6\126\ufff6\133\ufff6\001\002\000\072\002" +
    "\ufff4\014\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\045\ufff4\046\ufff4\052\ufff4\053\ufff4\055\ufff4\061\ufff4\062" +
    "\ufff4\064\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\126" +
    "\ufff4\133\ufff4\001\002\000\072\002\uffb1\014\uffb1\033\uffb1" +
    "\034\uffb1\040\uffb1\041\uffb1\042\uffb1\045\uffb1\046\uffb1\052" +
    "\uffb1\053\uffb1\055\uffb1\061\uffb1\062\uffb1\064\uffb1\066\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\126\uffb1\133\uffb1\001\002" +
    "\000\072\002\uffb0\014\uffb0\033\uffb0\034\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\045\uffb0\046\uffb0\052\uffb0\053\uffb0\055\uffb0" +
    "\061\uffb0\062\uffb0\064\uffb0\066\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\126\uffb0\133\uffb0\001\002\000\004\124\u0147\001" +
    "\002\000\010\016\u0134\017\u0132\022\u0131\001\002\000\004" +
    "\124\u012b\001\002\000\004\124\u0123\001\002\000\072\002" +
    "\ufff9\014\ufff9\033\ufff9\034\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\045\ufff9\046\ufff9\052\ufff9\053\ufff9\055\ufff9\061\ufff9\062" +
    "\ufff9\064\ufff9\066\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\126" +
    "\ufff9\133\ufff9\001\002\000\072\002\uffb2\014\uffb2\033\uffb2" +
    "\034\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2\052" +
    "\uffb2\053\uffb2\055\uffb2\061\uffb2\062\uffb2\064\uffb2\066\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\101\uffb2\126\uffb2\133\uffb2\001\002" +
    "\000\004\133\u0121\001\002\000\004\124\u011e\001\002\000" +
    "\016\015\356\016\357\017\354\020\353\021\352\022\351" +
    "\001\002\000\004\063\342\001\002\000\004\002\341\001" +
    "\002\000\076\002\uffd0\014\uffd0\033\uffd0\034\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\045\uffd0\046\uffd0\051\337\052\uffd0\053" +
    "\uffd0\055\uffd0\061\uffd0\062\uffd0\064\uffd0\066\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\126\uffd0\131\336\133\uffd0\001\002" +
    "\000\072\002\uffaf\014\uffaf\033\uffaf\034\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\045\uffaf\046\uffaf\052\uffaf\053\uffaf\055\uffaf" +
    "\061\uffaf\062\uffaf\064\uffaf\066\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\126\uffaf\133\uffaf\001\002\000\004\124\330\001" +
    "\002\000\074\002\uffb6\014\uffb6\033\uffb6\034\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\045\uffb6\046\uffb6\052\uffb6\053\uffb6\055" +
    "\uffb6\061\uffb6\062\uffb6\064\uffb6\066\uffb6\067\324\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\126\uffb6\133\uffb6\001\002\000\004" +
    "\133\310\001\002\000\072\002\uffb3\014\uffb3\033\uffb3\034" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\052\uffb3" +
    "\053\uffb3\055\uffb3\061\uffb3\062\uffb3\064\uffb3\066\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\126\uffb3\133\uffb3\001\002\000" +
    "\030\012\106\013\077\077\022\100\061\103\100\121\107" +
    "\124\104\133\105\134\103\135\075\136\271\001\002\000" +
    "\006\043\257\044\256\001\002\000\004\115\277\001\002" +
    "\000\026\012\106\013\077\077\022\100\061\103\100\121" +
    "\107\124\104\133\105\134\103\135\075\001\002\000\064" +
    "\002\000\014\023\033\021\034\014\040\006\041\042\042" +
    "\035\045\037\046\054\052\005\053\043\055\034\061\024" +
    "\062\041\064\032\066\015\070\050\073\062\074\030\075" +
    "\052\076\013\077\022\100\061\101\016\133\036\001\002" +
    "\000\004\063\264\001\002\000\006\043\257\044\256\001" +
    "\002\000\004\047\253\001\002\000\072\002\uffb4\014\uffb4" +
    "\033\uffb4\034\uffb4\040\uffb4\041\uffb4\042\uffb4\045\uffb4\046" +
    "\uffb4\052\uffb4\053\uffb4\055\uffb4\061\uffb4\062\uffb4\064\uffb4" +
    "\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\126\uffb4\133\uffb4" +
    "\001\002\000\072\002\uffae\014\uffae\033\uffae\034\uffae\040" +
    "\uffae\041\uffae\042\uffae\045\uffae\046\uffae\052\uffae\053\uffae" +
    "\055\uffae\061\uffae\062\uffae\064\uffae\066\uffae\070\uffae\071" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\126\uffae\133\uffae\001\002\000\072\002" +
    "\ufff7\014\ufff7\033\ufff7\034\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\045\ufff7\046\ufff7\052\ufff7\053\ufff7\055\ufff7\061\ufff7\062" +
    "\ufff7\064\ufff7\066\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\126" +
    "\ufff7\133\ufff7\001\002\000\072\002\ufffd\014\ufffd\033\ufffd" +
    "\034\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\052" +
    "\ufffd\053\ufffd\055\ufffd\061\ufffd\062\ufffd\064\ufffd\066\ufffd" +
    "\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076" +
    "\ufffd\077\ufffd\100\ufffd\101\ufffd\126\ufffd\133\ufffd\001\002" +
    "\000\004\124\234\001\002\000\100\002\uffce\014\uffce\033" +
    "\uffce\034\uffce\040\uffce\041\uffce\042\uffce\045\uffce\046\uffce" +
    "\051\226\052\uffce\053\uffce\054\225\055\uffce\061\uffce\062" +
    "\uffce\064\uffce\066\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\126" +
    "\uffce\131\224\133\uffce\001\002\000\004\131\223\001\002" +
    "\000\072\002\ufffc\014\ufffc\033\ufffc\034\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\045\ufffc\046\ufffc\052\ufffc\053\ufffc\055\ufffc" +
    "\061\ufffc\062\ufffc\064\ufffc\066\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc" +
    "\101\ufffc\126\ufffc\133\ufffc\001\002\000\004\047\207\001" +
    "\002\000\072\002\uffd1\014\uffd1\033\uffd1\034\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\046\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\061\uffd1\062\uffd1\064\uffd1\066\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\101\uffd1\126\uffd1\133\uffd1\001\002\000\072\002\uffbc" +
    "\014\uffbc\033\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc\045" +
    "\uffbc\046\uffbc\052\uffbc\053\uffbc\055\uffbc\061\uffbc\062\uffbc" +
    "\064\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\126\uffbc" +
    "\133\uffbc\001\002\000\072\002\ufffe\014\ufffe\033\ufffe\034" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe\052\ufffe" +
    "\053\ufffe\055\ufffe\061\ufffe\062\ufffe\064\ufffe\066\ufffe\070" +
    "\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\100\ufffe\101\ufffe\126\ufffe\133\ufffe\001\002\000" +
    "\072\002\ufff8\014\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\045\ufff8\046\ufff8\052\ufff8\053\ufff8\055\ufff8\061" +
    "\ufff8\062\ufff8\064\ufff8\066\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\126\ufff8\133\ufff8\001\002\000\004\124\204\001\002" +
    "\000\004\124\163\001\002\000\072\002\ufff5\014\ufff5\033" +
    "\ufff5\034\ufff5\040\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5" +
    "\052\ufff5\053\ufff5\055\ufff5\061\ufff5\062\ufff5\064\ufff5\066" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\076\ufff5\077\ufff5\100\ufff5\101\ufff5\126\ufff5\133\ufff5\001" +
    "\002\000\006\115\161\131\160\001\002\000\072\002\uffb7" +
    "\014\uffb7\033\uffb7\034\uffb7\040\uffb7\041\uffb7\042\uffb7\045" +
    "\uffb7\046\uffb7\052\uffb7\053\uffb7\055\uffb7\061\uffb7\062\uffb7" +
    "\064\uffb7\066\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\126\uffb7" +
    "\133\uffb7\001\002\000\072\002\uffbb\014\uffbb\033\uffbb\034" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\046\uffbb\052\uffbb" +
    "\053\uffbb\055\uffbb\061\uffbb\062\uffbb\064\uffbb\066\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\126\uffbb\133\uffbb\001\002\000" +
    "\076\002\uffcf\014\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\045\uffcf\046\uffcf\051\074\052\uffcf\053\uffcf\055" +
    "\uffcf\061\uffcf\062\uffcf\064\uffcf\066\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100" +
    "\uffcf\101\uffcf\126\uffcf\131\073\133\uffcf\001\002\000\072" +
    "\002\uffb5\014\uffb5\033\uffb5\034\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\045\uffb5\046\uffb5\052\uffb5\053\uffb5\055\uffb5\061\uffb5" +
    "\062\uffb5\064\uffb5\066\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\126\uffb5\133\uffb5\001\002\000\072\002\ufff3\014\ufff3\033" +
    "\ufff3\034\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\046\ufff3" +
    "\052\ufff3\053\ufff3\055\ufff3\061\ufff3\062\ufff3\064\ufff3\066" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\077\ufff3\100\ufff3\101\ufff3\126\ufff3\133\ufff3\001" +
    "\002\000\072\002\ufffb\014\ufffb\033\ufffb\034\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\045\ufffb\046\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\061\ufffb\062\ufffb\064\ufffb\066\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\126\ufffb\133\ufffb\001\002\000\076\002\uffc6" +
    "\014\uffc6\033\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6\045" +
    "\uffc6\046\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\061\uffc6" +
    "\062\uffc6\064\uffc6\066\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\126\uffc6\131\uffc6\133\uffc6\001\002\000\026\012\106\013" +
    "\077\077\022\100\061\103\100\121\107\124\104\133\105" +
    "\134\103\135\075\001\002\000\144\002\uff80\014\uff80\033" +
    "\uff80\034\uff80\040\uff80\041\uff80\042\uff80\045\uff80\046\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\061" +
    "\uff80\062\uff80\064\uff80\066\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80\111\uff80" +
    "\112\uff80\113\uff80\114\uff80\115\uff80\116\uff80\117\uff80\120" +
    "\uff80\122\uff80\123\uff80\126\uff80\130\uff80\131\uff80\132\uff80" +
    "\133\uff80\001\002\000\150\002\uff81\014\uff81\033\uff81\034" +
    "\uff81\040\uff81\041\uff81\042\uff81\045\uff81\046\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\061\uff81\062" +
    "\uff81\064\uff81\066\uff81\070\uff81\071\uff81\072\uff81\073\uff81" +
    "\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\105\uff81\106\uff81\111\uff81\112\uff81" +
    "\113\uff81\114\uff81\115\uff81\116\uff81\117\uff81\120\uff81\122" +
    "\uff81\123\uff81\124\150\126\uff81\127\147\130\uff81\131\uff81" +
    "\132\uff81\133\uff81\001\002\000\144\002\uff7d\014\uff7d\033" +
    "\uff7d\034\uff7d\040\uff7d\041\uff7d\042\uff7d\045\uff7d\046\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\061" +
    "\uff7d\062\uff7d\064\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101" +
    "\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\111\uff7d" +
    "\112\uff7d\113\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120" +
    "\uff7d\122\uff7d\123\uff7d\126\uff7d\130\uff7d\131\uff7d\132\uff7d" +
    "\133\uff7d\001\002\000\026\012\106\013\077\077\022\100" +
    "\061\103\100\121\107\124\104\133\105\134\103\135\075" +
    "\001\002\000\144\002\uff7b\014\uff7b\033\uff7b\034\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\045\uff7b\046\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\061\uff7b\062\uff7b\064" +
    "\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\106\uff7b\111\uff7b\112\uff7b\113\uff7b" +
    "\114\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\122\uff7b\123" +
    "\uff7b\126\uff7b\130\uff7b\131\uff7b\132\uff7b\133\uff7b\001\002" +
    "\000\130\002\uffc7\014\uffc7\033\uffc7\034\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\045\uffc7\046\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\055\uffc7\061\uffc7\062\uffc7\064\uffc7\066\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\121\103\114\104\120\105\123\106" +
    "\117\111\124\112\115\113\122\114\113\116\116\117\126" +
    "\120\112\122\125\126\uffc7\131\uffc7\133\uffc7\001\002\000" +
    "\144\002\uff7f\014\uff7f\033\uff7f\034\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\045\uff7f\046\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\061\uff7f\062\uff7f\064\uff7f\066\uff7f" +
    "\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\106\uff7f\111\uff7f\112\uff7f\113\uff7f\114\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\122\uff7f\123\uff7f\126\uff7f" +
    "\130\uff7f\131\uff7f\132\uff7f\133\uff7f\001\002\000\026\012" +
    "\106\013\077\077\022\100\061\103\100\121\107\124\104" +
    "\133\105\134\103\135\075\001\002\000\150\002\uff77\014" +
    "\uff77\033\uff77\034\uff77\040\uff77\041\uff77\042\uff77\045\uff77" +
    "\046\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056" +
    "\uff77\061\uff77\062\uff77\064\uff77\066\uff77\070\uff77\071\uff77" +
    "\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100" +
    "\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77" +
    "\111\uff77\112\uff77\113\uff77\114\uff77\115\uff77\116\uff77\117" +
    "\uff77\120\uff77\122\uff77\123\uff77\124\uff77\126\uff77\127\uff77" +
    "\130\uff77\131\uff77\132\uff77\133\uff77\001\002\000\144\002" +
    "\uff7e\014\uff7e\033\uff7e\034\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\045\uff7e\046\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\061\uff7e\062\uff7e\064\uff7e\066\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077" +
    "\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e" +
    "\106\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\115\uff7e\116" +
    "\uff7e\117\uff7e\120\uff7e\122\uff7e\123\uff7e\126\uff7e\130\uff7e" +
    "\131\uff7e\132\uff7e\133\uff7e\001\002\000\026\012\106\013" +
    "\077\077\022\100\061\103\100\121\107\124\104\133\105" +
    "\134\103\135\075\001\002\000\144\002\uff7c\014\uff7c\033" +
    "\uff7c\034\uff7c\040\uff7c\041\uff7c\042\uff7c\045\uff7c\046\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\061" +
    "\uff7c\062\uff7c\064\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c" +
    "\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\111\uff7c" +
    "\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\120" +
    "\uff7c\122\uff7c\123\uff7c\126\uff7c\130\uff7c\131\uff7c\132\uff7c" +
    "\133\uff7c\001\002\000\144\002\uff83\014\uff83\033\uff83\034" +
    "\uff83\040\uff83\041\uff83\042\uff83\045\uff83\046\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\061\uff83\062" +
    "\uff83\064\uff83\066\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\121\103\114\104\120\105\123\106\117\111\124\112\115" +
    "\113\122\114\113\115\uff83\116\116\117\uff83\120\uff83\122" +
    "\125\123\uff83\126\uff83\130\uff83\131\uff83\132\uff83\133\uff83" +
    "\001\002\000\026\012\106\013\077\077\022\100\061\103" +
    "\100\121\107\124\104\133\105\134\103\135\075\001\002" +
    "\000\026\012\106\013\077\077\022\100\061\103\100\121" +
    "\107\124\104\133\105\134\103\135\075\001\002\000\026" +
    "\012\106\013\077\077\022\100\061\103\100\121\107\124" +
    "\104\133\105\134\103\135\075\001\002\000\026\012\106" +
    "\013\077\077\022\100\061\103\100\121\107\124\104\133" +
    "\105\134\103\135\075\001\002\000\026\012\106\013\077" +
    "\077\022\100\061\103\100\121\107\124\104\133\105\134" +
    "\103\135\075\001\002\000\026\012\106\013\077\077\022" +
    "\100\061\103\100\121\107\124\104\133\105\134\103\135" +
    "\075\001\002\000\026\012\106\013\077\077\022\100\061" +
    "\103\100\121\107\124\104\133\105\134\103\135\075\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\026\012\106\013\077\077\022\100\061\103\100\121\107" +
    "\124\104\133\105\134\103\135\075\001\002\000\026\012" +
    "\106\013\077\077\022\100\061\103\100\121\107\124\104" +
    "\133\105\134\103\135\075\001\002\000\026\012\106\013" +
    "\077\077\022\100\061\103\100\121\107\124\104\133\105" +
    "\134\103\135\075\001\002\000\026\012\106\013\077\077" +
    "\022\100\061\103\100\121\107\124\104\133\105\134\103" +
    "\135\075\001\002\000\026\012\106\013\077\077\022\100" +
    "\061\103\100\121\107\124\104\133\105\134\103\135\075" +
    "\001\002\000\144\002\uff85\014\uff85\033\uff85\034\uff85\040" +
    "\uff85\041\uff85\042\uff85\045\uff85\046\uff85\051\uff85\052\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\061\uff85\062\uff85\064" +
    "\uff85\066\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\121\103" +
    "\114\104\120\105\123\106\117\111\124\112\115\113\122" +
    "\114\113\115\uff85\116\116\117\uff85\120\112\122\125\123" +
    "\uff85\126\uff85\130\uff85\131\uff85\132\uff85\133\uff85\001\002" +
    "\000\144\002\uff8c\014\uff8c\033\uff8c\034\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\061\uff8c\062\uff8c\064\uff8c\066" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102\121\103\114\104" +
    "\120\105\123\106\117\111\uff8c\112\uff8c\113\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\117\uff8c\120\uff8c\122\uff8c\123\uff8c\126" +
    "\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c\001\002\000\144" +
    "\002\uff88\014\uff88\033\uff88\034\uff88\040\uff88\041\uff88\042" +
    "\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\061\uff88\062\uff88\064\uff88\066\uff88\070" +
    "\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88" +
    "\077\uff88\100\uff88\101\uff88\102\121\103\114\104\120\105" +
    "\123\106\117\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88" +
    "\116\uff88\117\uff88\120\uff88\122\uff88\123\uff88\126\uff88\130" +
    "\uff88\131\uff88\132\uff88\133\uff88\001\002\000\144\002\uff8e" +
    "\014\uff8e\033\uff8e\034\uff8e\040\uff8e\041\uff8e\042\uff8e\045" +
    "\uff8e\046\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\061\uff8e\062\uff8e\064\uff8e\066\uff8e\070\uff8e\071" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e" +
    "\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106" +
    "\117\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e" +
    "\117\uff8e\120\uff8e\122\uff8e\123\uff8e\126\uff8e\130\uff8e\131" +
    "\uff8e\132\uff8e\133\uff8e\001\002\000\144\002\uff87\014\uff87" +
    "\033\uff87\034\uff87\040\uff87\041\uff87\042\uff87\045\uff87\046" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\061\uff87\062\uff87\064\uff87\066\uff87\070\uff87\071\uff87\072" +
    "\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87" +
    "\101\uff87\102\121\103\114\104\120\105\123\106\117\111" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\120\uff87\122\uff87\123\uff87\126\uff87\130\uff87\131\uff87\132" +
    "\uff87\133\uff87\001\002\000\144\002\uff91\014\uff91\033\uff91" +
    "\034\uff91\040\uff91\041\uff91\042\uff91\045\uff91\046\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\061\uff91" +
    "\062\uff91\064\uff91\066\uff91\070\uff91\071\uff91\072\uff91\073" +
    "\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101\uff91" +
    "\102\uff91\103\uff91\104\120\105\123\106\117\111\uff91\112" +
    "\uff91\113\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91" +
    "\122\uff91\123\uff91\126\uff91\130\uff91\131\uff91\132\uff91\133" +
    "\uff91\001\002\000\144\002\uff8f\014\uff8f\033\uff8f\034\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\045\uff8f\046\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\061\uff8f\062\uff8f" +
    "\064\uff8f\066\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074" +
    "\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f" +
    "\103\uff8f\104\uff8f\105\uff8f\106\117\111\uff8f\112\uff8f\113" +
    "\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\122\uff8f" +
    "\123\uff8f\126\uff8f\130\uff8f\131\uff8f\132\uff8f\133\uff8f\001" +
    "\002\000\144\002\uff8d\014\uff8d\033\uff8d\034\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\045\uff8d\046\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\061\uff8d\062\uff8d\064\uff8d" +
    "\066\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075" +
    "\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\105\uff8d\106\uff8d\111\uff8d\112\uff8d\113\uff8d\114" +
    "\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\122\uff8d\123\uff8d" +
    "\126\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\001\002\000" +
    "\144\002\uff8b\014\uff8b\033\uff8b\034\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\045\uff8b\046\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\061\uff8b\062\uff8b\064\uff8b\066\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076" +
    "\uff8b\077\uff8b\100\uff8b\101\uff8b\102\121\103\114\104\120" +
    "\105\123\106\117\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115" +
    "\uff8b\116\uff8b\117\uff8b\120\uff8b\122\uff8b\123\uff8b\126\uff8b" +
    "\130\uff8b\131\uff8b\132\uff8b\133\uff8b\001\002\000\144\002" +
    "\uff8a\014\uff8a\033\uff8a\034\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\045\uff8a\046\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\061\uff8a\062\uff8a\064\uff8a\066\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff8a\100\uff8a\101\uff8a\102\121\103\114\104\120\105\123" +
    "\106\117\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116" +
    "\uff8a\117\uff8a\120\uff8a\122\uff8a\123\uff8a\126\uff8a\130\uff8a" +
    "\131\uff8a\132\uff8a\133\uff8a\001\002\000\144\002\uff90\014" +
    "\uff90\033\uff90\034\uff90\040\uff90\041\uff90\042\uff90\045\uff90" +
    "\046\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\061\uff90\062\uff90\064\uff90\066\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100" +
    "\uff90\101\uff90\102\uff90\103\uff90\104\120\105\123\106\117" +
    "\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116\uff90\117" +
    "\uff90\120\uff90\122\uff90\123\uff90\126\uff90\130\uff90\131\uff90" +
    "\132\uff90\133\uff90\001\002\000\144\002\uff89\014\uff89\033" +
    "\uff89\034\uff89\040\uff89\041\uff89\042\uff89\045\uff89\046\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\061" +
    "\uff89\062\uff89\064\uff89\066\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101" +
    "\uff89\102\121\103\114\104\120\105\123\106\117\111\uff89" +
    "\112\uff89\113\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120" +
    "\uff89\122\uff89\123\uff89\126\uff89\130\uff89\131\uff89\132\uff89" +
    "\133\uff89\001\002\000\144\002\uff86\014\uff86\033\uff86\034" +
    "\uff86\040\uff86\041\uff86\042\uff86\045\uff86\046\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\061\uff86\062" +
    "\uff86\064\uff86\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86" +
    "\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102" +
    "\121\103\114\104\120\105\123\106\117\111\124\112\115" +
    "\113\122\114\113\115\uff86\116\116\117\uff86\120\uff86\122" +
    "\125\123\uff86\126\uff86\130\uff86\131\uff86\132\uff86\133\uff86" +
    "\001\002\000\036\102\121\103\114\104\120\105\123\106" +
    "\117\111\124\112\115\113\122\114\113\116\116\117\126" +
    "\120\112\122\125\123\145\001\002\000\144\002\uff82\014" +
    "\uff82\033\uff82\034\uff82\040\uff82\041\uff82\042\uff82\045\uff82" +
    "\046\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056" +
    "\uff82\061\uff82\062\uff82\064\uff82\066\uff82\070\uff82\071\uff82" +
    "\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82" +
    "\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116\uff82\117" +
    "\uff82\120\uff82\122\uff82\123\uff82\126\uff82\130\uff82\131\uff82" +
    "\132\uff82\133\uff82\001\002\000\144\002\uff84\014\uff84\033" +
    "\uff84\034\uff84\040\uff84\041\uff84\042\uff84\045\uff84\046\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\061" +
    "\uff84\062\uff84\064\uff84\066\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101" +
    "\uff84\102\uff84\103\uff84\104\120\105\123\106\117\111\uff84" +
    "\112\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84\120" +
    "\uff84\122\uff84\123\uff84\126\uff84\130\uff84\131\uff84\132\uff84" +
    "\133\uff84\001\002\000\004\133\157\001\002\000\030\012" +
    "\106\013\077\077\022\100\061\103\100\121\107\123\152" +
    "\124\104\133\105\134\103\135\075\001\002\000\140\002" +
    "\uff75\014\uff75\033\uff75\034\uff75\040\uff75\041\uff75\042\uff75" +
    "\045\uff75\046\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055" +
    "\uff75\056\uff75\061\uff75\062\uff75\064\uff75\066\uff75\070\uff75" +
    "\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077" +
    "\uff75\100\uff75\101\uff75\102\121\103\114\104\120\105\123" +
    "\106\117\111\124\112\115\113\122\114\113\116\116\117" +
    "\126\120\112\122\125\123\uff75\126\uff75\130\uff75\131\uff75" +
    "\133\uff75\001\002\000\150\002\uff79\014\uff79\033\uff79\034" +
    "\uff79\040\uff79\041\uff79\042\uff79\045\uff79\046\uff79\051\uff79" +
    "\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\061\uff79\062" +
    "\uff79\064\uff79\066\uff79\070\uff79\071\uff79\072\uff79\073\uff79" +
    "\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\106\uff79\111\uff79\112\uff79" +
    "\113\uff79\114\uff79\115\uff79\116\uff79\117\uff79\120\uff79\122" +
    "\uff79\123\uff79\124\uff79\126\uff79\127\uff79\130\uff79\131\uff79" +
    "\132\uff79\133\uff79\001\002\000\006\123\155\130\154\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\150\002\uff7a\014\uff7a\033\uff7a\034\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\061\uff7a\062\uff7a\064\uff7a\066\uff7a" +
    "\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076" +
    "\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a" +
    "\105\uff7a\106\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\115" +
    "\uff7a\116\uff7a\117\uff7a\120\uff7a\122\uff7a\123\uff7a\124\uff7a" +
    "\126\uff7a\127\uff7a\130\uff7a\131\uff7a\132\uff7a\133\uff7a\001" +
    "\002\000\140\002\uff76\014\uff76\033\uff76\034\uff76\040\uff76" +
    "\041\uff76\042\uff76\045\uff76\046\uff76\051\uff76\052\uff76\053" +
    "\uff76\054\uff76\055\uff76\056\uff76\061\uff76\062\uff76\064\uff76" +
    "\066\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\121\103\114" +
    "\104\120\105\123\106\117\111\124\112\115\113\122\114" +
    "\113\116\116\117\126\120\112\122\125\123\uff76\126\uff76" +
    "\130\uff76\131\uff76\133\uff76\001\002\000\150\002\uff78\014" +
    "\uff78\033\uff78\034\uff78\040\uff78\041\uff78\042\uff78\045\uff78" +
    "\046\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056" +
    "\uff78\061\uff78\062\uff78\064\uff78\066\uff78\070\uff78\071\uff78" +
    "\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100" +
    "\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78" +
    "\111\uff78\112\uff78\113\uff78\114\uff78\115\uff78\116\uff78\117" +
    "\uff78\120\uff78\122\uff78\123\uff78\124\uff78\126\uff78\127\uff78" +
    "\130\uff78\131\uff78\132\uff78\133\uff78\001\002\000\072\002" +
    "\uffb8\014\uffb8\033\uffb8\034\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\045\uffb8\046\uffb8\052\uffb8\053\uffb8\055\uffb8\061\uffb8\062" +
    "\uffb8\064\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\126" +
    "\uffb8\133\uffb8\001\002\000\026\012\106\013\077\077\022" +
    "\100\061\103\100\121\107\124\104\133\105\134\103\135" +
    "\075\001\002\000\040\102\121\103\114\104\120\105\123" +
    "\106\117\111\124\112\115\113\122\114\113\115\uffad\116" +
    "\116\117\126\120\112\122\125\131\uffad\001\002\000\004" +
    "\064\164\001\002\000\004\133\165\001\002\000\004\004" +
    "\166\001\002\000\004\115\167\001\002\000\026\012\106" +
    "\013\077\077\022\100\061\103\100\121\107\124\104\133" +
    "\105\134\103\135\075\001\002\000\036\102\121\103\114" +
    "\104\120\105\123\106\117\111\124\112\115\113\122\114" +
    "\113\116\116\117\126\120\112\122\125\131\171\001\002" +
    "\000\026\012\106\013\077\077\022\100\061\103\100\121" +
    "\107\124\104\133\105\134\103\135\075\001\002\000\036" +
    "\102\121\103\114\104\120\105\123\106\117\111\124\112" +
    "\115\113\122\114\113\116\116\117\126\120\112\122\125" +
    "\131\173\001\002\000\006\107\175\110\174\001\002\000" +
    "\004\123\uff9f\001\002\000\004\123\uffa0\001\002\000\004" +
    "\123\177\001\002\000\004\125\200\001\002\000\062\014" +
    "\023\033\021\034\014\040\006\041\042\042\035\045\037" +
    "\046\054\052\005\053\043\055\034\061\024\062\041\064" +
    "\032\066\015\070\050\073\062\074\030\075\052\076\013" +
    "\077\022\100\061\101\016\133\036\001\002\000\064\014" +
    "\023\033\021\034\014\040\006\041\042\042\035\045\037" +
    "\046\054\052\005\053\043\055\034\061\024\062\041\064" +
    "\032\066\015\070\050\073\062\074\030\075\052\076\013" +
    "\077\022\100\061\101\016\126\202\133\036\001\002\000" +
    "\072\002\uffa1\014\uffa1\033\uffa1\034\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\045\uffa1\046\uffa1\052\uffa1\053\uffa1\055\uffa1\061" +
    "\uffa1\062\uffa1\064\uffa1\066\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\126\uffa1\133\uffa1\001\002\000\072\002\uffff\014\uffff" +
    "\033\uffff\034\uffff\040\uffff\041\uffff\042\uffff\045\uffff\046" +
    "\uffff\052\uffff\053\uffff\055\uffff\061\uffff\062\uffff\064\uffff" +
    "\066\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075" +
    "\uffff\076\uffff\077\uffff\100\uffff\101\uffff\126\uffff\133\uffff" +
    "\001\002\000\004\123\205\001\002\000\004\131\206\001" +
    "\002\000\144\002\uff9a\014\uff9a\033\uff9a\034\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\045\uff9a\046\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\061\uff9a\062\uff9a\064\uff9a" +
    "\066\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\111\uff9a\112\uff9a\113\uff9a\114" +
    "\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\122\uff9a\123\uff9a" +
    "\126\uff9a\130\uff9a\131\uff9a\132\uff9a\133\uff9a\001\002\000" +
    "\004\016\210\001\002\000\004\133\211\001\002\000\004" +
    "\124\213\001\002\000\006\050\217\131\216\001\002\000" +
    "\026\012\106\013\077\077\022\100\061\103\100\121\107" +
    "\124\104\133\105\134\103\135\075\001\002\000\006\123" +
    "\215\130\154\001\002\000\006\050\uffcb\131\uffcb\001\002" +
    "\000\072\002\uffcd\014\uffcd\033\uffcd\034\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\045\uffcd\046\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\061\uffcd\062\uffcd\064\uffcd\066\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\126\uffcd\133\uffcd\001\002\000\004\124\220\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\006\123\222\130\154\001\002\000\006\050\uffcc\131\uffcc" +
    "\001\002\000\072\002\uff9d\014\uff9d\033\uff9d\034\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\052\uff9d\053\uff9d" +
    "\055\uff9d\061\uff9d\062\uff9d\064\uff9d\066\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\126\uff9d\133\uff9d\001\002\000\102\002" +
    "\uffc2\014\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\045\uffc2\046\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\066\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\111\uffc2\126\uffc2\131\uffc2\133\uffc2\001\002" +
    "\000\004\133\230\001\002\000\026\012\106\013\077\077" +
    "\022\100\061\103\100\121\107\124\104\133\105\134\103" +
    "\135\075\001\002\000\132\002\uffc3\014\uffc3\033\uffc3\034" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3\046\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\061\uffc3\062\uffc3\064" +
    "\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\121\103" +
    "\114\104\120\105\123\106\117\111\124\112\115\113\122" +
    "\114\113\116\116\117\126\120\112\122\125\126\uffc3\131" +
    "\uffc3\133\uffc3\001\002\000\006\057\233\060\232\001\002" +
    "\000\102\002\uffc4\014\uffc4\033\uffc4\034\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\045\uffc4\046\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\061\uffc4\062\uffc4\064\uffc4\066\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\111\uffc4\126\uffc4\131\uffc4\133" +
    "\uffc4\001\002\000\102\002\uffbf\014\uffbf\033\uffbf\034\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\045\uffbf\046\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\061\uffbf\062\uffbf\064\uffbf" +
    "\066\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\111\uffbf\126\uffbf" +
    "\131\uffbf\133\uffbf\001\002\000\102\002\uffc0\014\uffc0\033" +
    "\uffc0\034\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\061\uffc0\062" +
    "\uffc0\064\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\111" +
    "\uffc0\126\uffc0\131\uffc0\133\uffc0\001\002\000\026\012\106" +
    "\013\077\077\022\100\061\103\100\121\107\124\104\133" +
    "\105\134\103\135\075\001\002\000\036\102\121\103\114" +
    "\104\120\105\123\106\117\111\124\112\115\113\122\114" +
    "\113\116\116\117\126\120\112\122\125\123\236\001\002" +
    "\000\004\125\237\001\002\000\006\071\243\072\241\001" +
    "\002\000\010\071\243\072\241\126\252\001\002\000\004" +
    "\132\247\001\002\000\010\071\uffa4\072\uffa4\126\uffa4\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\036\102\121\103\114\104\120\105\123\106\117\111\124" +
    "\112\115\113\122\114\113\116\116\117\126\120\112\122" +
    "\125\132\245\001\002\000\062\014\023\033\021\034\014" +
    "\040\006\041\042\042\035\045\037\046\054\052\005\053" +
    "\043\055\034\061\024\062\041\064\032\066\015\070\050" +
    "\073\062\074\030\075\052\076\013\077\022\100\061\101" +
    "\016\133\036\001\002\000\070\014\023\033\021\034\014" +
    "\040\006\041\042\042\035\045\037\046\054\052\005\053" +
    "\043\055\034\061\024\062\041\064\032\066\015\070\050" +
    "\071\uffa3\072\uffa3\073\062\074\030\075\052\076\013\077" +
    "\022\100\061\101\016\126\uffa3\133\036\001\002\000\062" +
    "\014\023\033\021\034\014\040\006\041\042\042\035\045" +
    "\037\046\054\052\005\053\043\055\034\061\024\062\041" +
    "\064\032\066\015\070\050\073\062\074\030\075\052\076" +
    "\013\077\022\100\061\101\016\133\036\001\002\000\070" +
    "\014\023\033\021\034\014\040\006\041\042\042\035\045" +
    "\037\046\054\052\005\053\043\055\034\061\024\062\041" +
    "\064\032\066\015\070\050\071\uffa2\072\uffa2\073\062\074" +
    "\030\075\052\076\013\077\022\100\061\101\016\126\uffa2" +
    "\133\036\001\002\000\010\071\uffa5\072\uffa5\126\uffa5\001" +
    "\002\000\072\002\uffa6\014\uffa6\033\uffa6\034\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\045\uffa6\046\uffa6\052\uffa6\053\uffa6\055" +
    "\uffa6\061\uffa6\062\uffa6\064\uffa6\066\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\101\uffa6\126\uffa6\133\uffa6\001\002\000\004\016\254" +
    "\001\002\000\004\133\255\001\002\000\076\002\uffc5\014" +
    "\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5" +
    "\046\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\061\uffc5\062" +
    "\uffc5\064\uffc5\066\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\126" +
    "\uffc5\131\uffc5\133\uffc5\001\002\000\006\133\uffd4\135\uffd4" +
    "\001\002\000\006\133\uffd5\135\uffd5\001\002\000\004\133" +
    "\261\001\002\000\004\133\262\001\002\000\004\131\263" +
    "\001\002\000\072\002\uffd6\014\uffd6\033\uffd6\034\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\045\uffd6\046\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\061\uffd6\062\uffd6\064\uffd6\066\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\126\uffd6\133\uffd6\001\002\000\004\133" +
    "\265\001\002\000\004\130\266\001\002\000\004\133\267" +
    "\001\002\000\004\127\270\001\002\000\030\012\106\013" +
    "\077\077\022\100\061\103\100\121\107\124\104\133\105" +
    "\134\103\135\075\136\271\001\002\000\006\056\uffbe\131" +
    "\uffbe\001\002\000\004\131\274\001\002\000\010\056\uffbd" +
    "\130\154\131\uffbd\001\002\000\072\002\uffb9\014\uffb9\033" +
    "\uffb9\034\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9" +
    "\052\uffb9\053\uffb9\055\uffb9\061\uffb9\062\uffb9\064\uffb9\066" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\101\uffb9\126\uffb9\133\uffb9\001" +
    "\002\000\036\102\121\103\114\104\120\105\123\106\117" +
    "\111\124\112\115\113\122\114\113\116\116\117\126\120" +
    "\112\122\125\131\276\001\002\000\072\002\uffd2\014\uffd2" +
    "\033\uffd2\034\uffd2\040\uffd2\041\uffd2\042\uffd2\045\uffd2\046" +
    "\uffd2\052\uffd2\053\uffd2\055\uffd2\061\uffd2\062\uffd2\064\uffd2" +
    "\066\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\126\uffd2\133\uffd2" +
    "\001\002\000\026\012\106\013\077\077\022\100\061\103" +
    "\100\121\107\124\104\133\105\134\103\135\075\001\002" +
    "\000\036\102\121\103\114\104\120\105\123\106\117\111" +
    "\124\112\115\113\122\114\113\116\116\117\126\120\112" +
    "\122\125\131\301\001\002\000\072\002\uffa9\014\uffa9\033" +
    "\uffa9\034\uffa9\040\uffa9\041\uffa9\042\uffa9\045\uffa9\046\uffa9" +
    "\052\uffa9\053\uffa9\055\uffa9\061\uffa9\062\uffa9\064\uffa9\066" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\126\uffa9\133\uffa9\001" +
    "\002\000\004\135\303\001\002\000\004\131\304\001\002" +
    "\000\072\002\uffd3\014\uffd3\033\uffd3\034\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\045\uffd3\046\uffd3\052\uffd3\053\uffd3\055\uffd3" +
    "\061\uffd3\062\uffd3\064\uffd3\066\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\126\uffd3\133\uffd3\001\002\000\004\056\306\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\104\002\uffc1\014\uffc1\033\uffc1\034\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\045\uffc1\046\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\061\uffc1\062\uffc1\064\uffc1\066\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\111\uffc1\126\uffc1\130\154\131\uffc1" +
    "\133\uffc1\001\002\000\022\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\130\uffaa\133\uffaa\001\002\000\022" +
    "\004\314\005\317\006\315\007\322\010\316\011\312\130" +
    "\313\133\320\001\002\000\012\115\uff93\125\uff93\131\uff93" +
    "\133\uff93\001\002\000\004\133\323\001\002\000\012\115" +
    "\uff97\125\uff97\131\uff97\133\uff97\001\002\000\012\115\uff94" +
    "\125\uff94\131\uff94\133\uff94\001\002\000\012\115\uff95\125" +
    "\uff95\131\uff95\133\uff95\001\002\000\012\115\uff96\125\uff96" +
    "\131\uff96\133\uff96\001\002\000\012\115\uff92\125\uff92\131" +
    "\uff92\133\uff92\001\002\000\006\115\uffac\131\uffac\001\002" +
    "\000\012\115\uff98\125\uff98\131\uff98\133\uff98\001\002\000" +
    "\022\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\130\uffab\133\uffab\001\002\000\004\125\325\001\002\000" +
    "\062\014\023\033\021\034\014\040\006\041\042\042\035" +
    "\045\037\046\054\052\005\053\043\055\034\061\024\062" +
    "\041\064\032\066\015\070\050\073\062\074\030\075\052" +
    "\076\013\077\022\100\061\101\016\133\036\001\002\000" +
    "\064\014\023\033\021\034\014\040\006\041\042\042\035" +
    "\045\037\046\054\052\005\053\043\055\034\061\024\062" +
    "\041\064\032\066\015\070\050\073\062\074\030\075\052" +
    "\076\013\077\022\100\061\101\016\126\327\133\036\001" +
    "\002\000\074\002\uffa8\014\uffa8\033\uffa8\034\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\045\uffa8\046\uffa8\052\uffa8\053\uffa8\055" +
    "\uffa8\061\uffa8\062\uffa8\064\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\126\uffa8\133\uffa8\001\002\000\026" +
    "\012\106\013\077\077\022\100\061\103\100\121\107\124" +
    "\104\133\105\134\103\135\075\001\002\000\036\102\121" +
    "\103\114\104\120\105\123\106\117\111\124\112\115\113" +
    "\122\114\113\116\116\117\126\120\112\122\125\123\332" +
    "\001\002\000\004\125\333\001\002\000\062\014\023\033" +
    "\021\034\014\040\006\041\042\042\035\045\037\046\054" +
    "\052\005\053\043\055\034\061\024\062\041\064\032\066" +
    "\015\070\050\073\062\074\030\075\052\076\013\077\022" +
    "\100\061\101\016\133\036\001\002\000\064\014\023\033" +
    "\021\034\014\040\006\041\042\042\035\045\037\046\054" +
    "\052\005\053\043\055\034\061\024\062\041\064\032\066" +
    "\015\070\050\073\062\074\030\075\052\076\013\077\022" +
    "\100\061\101\016\126\335\133\036\001\002\000\072\002" +
    "\uff9e\014\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\045\uff9e\046\uff9e\052\uff9e\053\uff9e\055\uff9e\061\uff9e\062" +
    "\uff9e\064\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\126" +
    "\uff9e\133\uff9e\001\002\000\076\002\uffc9\014\uffc9\033\uffc9" +
    "\034\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\055\uffc9\061\uffc9\062\uffc9\064\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\126\uffc9\131\uffc9" +
    "\133\uffc9\001\002\000\026\012\106\013\077\077\022\100" +
    "\061\103\100\121\107\124\104\133\105\134\103\135\075" +
    "\001\002\000\130\002\uffca\014\uffca\033\uffca\034\uffca\040" +
    "\uffca\041\uffca\042\uffca\045\uffca\046\uffca\051\uffca\052\uffca" +
    "\053\uffca\055\uffca\061\uffca\062\uffca\064\uffca\066\uffca\070" +
    "\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\121\103\114\104\120\105" +
    "\123\106\117\111\124\112\115\113\122\114\113\116\116" +
    "\117\126\120\112\122\125\126\uffca\131\uffca\133\uffca\001" +
    "\002\000\004\002\001\001\002\000\004\133\343\001\002" +
    "\000\004\130\344\001\002\000\004\133\345\001\002\000" +
    "\004\127\346\001\002\000\030\012\106\013\077\077\022" +
    "\100\061\103\100\121\107\124\104\133\105\134\103\135" +
    "\075\136\271\001\002\000\004\131\350\001\002\000\072" +
    "\002\uffba\014\uffba\033\uffba\034\uffba\040\uffba\041\uffba\042" +
    "\uffba\045\uffba\046\uffba\052\uffba\053\uffba\055\uffba\061\uffba" +
    "\062\uffba\064\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba" +
    "\126\uffba\133\uffba\001\002\000\004\133\u0118\001\002\000" +
    "\004\133\u0110\001\002\000\004\133\u010a\001\002\000\004" +
    "\133\u0105\001\002\000\072\002\ufff2\014\ufff2\033\ufff2\034" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\045\ufff2\046\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\061\ufff2\062\ufff2\064\ufff2\066\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\126\ufff2\133\ufff2\001\002\000" +
    "\004\133\u0103\001\002\000\004\133\360\001\002\000\004" +
    "\124\361\001\002\000\020\004\314\005\317\006\315\007" +
    "\322\010\316\011\312\133\320\001\002\000\022\024\370" +
    "\025\374\026\367\027\373\030\366\032\372\123\375\130" +
    "\365\001\002\000\004\133\364\001\002\000\022\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\123\uffe9\130" +
    "\uffe9\001\002\000\020\004\314\005\317\006\315\007\322" +
    "\010\316\011\312\133\320\001\002\000\004\031\377\001" +
    "\002\000\022\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\032\uffe6\123\uffe6\130\uffe6\001\002\000\022\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\123\uffe8\130\uffe8" +
    "\001\002\000\022\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\032\uffea\123\uffea\130\uffea\001\002\000\022\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\123\uffe3\130" +
    "\uffe3\001\002\000\022\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\123\uffe5\130\uffe5\001\002\000\022\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\123\uffe7" +
    "\130\uffe7\001\002\000\004\131\376\001\002\000\072\002" +
    "\ufff0\014\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\045\ufff0\046\ufff0\052\ufff0\053\ufff0\055\ufff0\061\ufff0\062" +
    "\ufff0\064\ufff0\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\126" +
    "\ufff0\133\ufff0\001\002\000\004\133\u0100\001\002\000\022" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\123" +
    "\uffe4\130\uffe4\001\002\000\004\133\u0102\001\002\000\022" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\123" +
    "\uffeb\130\uffeb\001\002\000\004\131\u0104\001\002\000\072" +
    "\002\ufff1\014\ufff1\033\ufff1\034\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\045\ufff1\046\ufff1\052\ufff1\053\ufff1\055\ufff1\061\ufff1" +
    "\062\ufff1\064\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\126\ufff1\133\ufff1\001\002\000\004\124\u0106\001\002\000" +
    "\020\004\314\005\317\006\315\007\322\010\316\011\312" +
    "\133\320\001\002\000\022\024\370\025\374\026\367\027" +
    "\373\030\366\032\372\123\u0108\130\365\001\002\000\004" +
    "\131\u0109\001\002\000\072\002\uffef\014\uffef\033\uffef\034" +
    "\uffef\040\uffef\041\uffef\042\uffef\045\uffef\046\uffef\052\uffef" +
    "\053\uffef\055\uffef\061\uffef\062\uffef\064\uffef\066\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\100\uffef\101\uffef\126\uffef\133\uffef\001\002\000" +
    "\004\124\u010b\001\002\000\020\004\314\005\317\006\315" +
    "\007\322\010\316\011\312\133\320\001\002\000\022\024" +
    "\370\025\374\026\367\027\373\030\366\032\372\123\u010d" +
    "\130\365\001\002\000\004\125\u010e\001\002\000\004\126" +
    "\u010f\001\002\000\072\002\uffee\014\uffee\033\uffee\034\uffee" +
    "\040\uffee\041\uffee\042\uffee\045\uffee\046\uffee\052\uffee\053" +
    "\uffee\055\uffee\061\uffee\062\uffee\064\uffee\066\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077" +
    "\uffee\100\uffee\101\uffee\126\uffee\133\uffee\001\002\000\004" +
    "\124\u0111\001\002\000\020\004\314\005\317\006\315\007" +
    "\322\010\316\011\312\133\320\001\002\000\022\024\370" +
    "\025\374\026\367\027\373\030\366\032\372\123\u0113\130" +
    "\365\001\002\000\020\004\314\005\317\006\315\007\322" +
    "\010\316\011\312\133\320\001\002\000\004\125\u0115\001" +
    "\002\000\062\014\023\033\021\034\014\040\006\041\042" +
    "\042\035\045\037\046\054\052\005\053\043\055\034\061" +
    "\024\062\041\064\032\066\015\070\050\073\062\074\030" +
    "\075\052\076\013\077\022\100\061\101\016\133\036\001" +
    "\002\000\064\014\023\033\021\034\014\040\006\041\042" +
    "\042\035\045\037\046\054\052\005\053\043\055\034\061" +
    "\024\062\041\064\032\066\015\070\050\073\062\074\030" +
    "\075\052\076\013\077\022\100\061\101\016\126\u0117\133" +
    "\036\001\002\000\072\002\uffed\014\uffed\033\uffed\034\uffed" +
    "\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\052\uffed\053" +
    "\uffed\055\uffed\061\uffed\062\uffed\064\uffed\066\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077" +
    "\uffed\100\uffed\101\uffed\126\uffed\133\uffed\001\002\000\004" +
    "\065\u0119\001\002\000\004\023\u011a\001\002\000\004\115" +
    "\u011b\001\002\000\026\012\106\013\077\077\022\100\061" +
    "\103\100\121\107\124\104\133\105\134\103\135\075\001" +
    "\002\000\036\102\121\103\114\104\120\105\123\106\117" +
    "\111\124\112\115\113\122\114\113\116\116\117\126\120" +
    "\112\122\125\131\u011d\001\002\000\072\002\uffec\014\uffec" +
    "\033\uffec\034\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046" +
    "\uffec\052\uffec\053\uffec\055\uffec\061\uffec\062\uffec\064\uffec" +
    "\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\077\uffec\100\uffec\101\uffec\126\uffec\133\uffec" +
    "\001\002\000\004\123\u011f\001\002\000\004\131\u0120\001" +
    "\002\000\144\002\uff9b\014\uff9b\033\uff9b\034\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\045\uff9b\046\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\061\uff9b\062\uff9b\064\uff9b" +
    "\066\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\111\uff9b\112\uff9b\113\uff9b\114" +
    "\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\122\uff9b\123\uff9b" +
    "\126\uff9b\130\uff9b\131\uff9b\132\uff9b\133\uff9b\001\002\000" +
    "\004\131\u0122\001\002\000\072\002\uffe2\014\uffe2\033\uffe2" +
    "\034\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\052" +
    "\uffe2\053\uffe2\055\uffe2\061\uffe2\062\uffe2\064\uffe2\066\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\101\uffe2\126\uffe2\133\uffe2\001\002" +
    "\000\004\112\u0124\001\002\000\004\112\u0125\001\002\000" +
    "\004\055\034\001\002\000\012\051\226\054\225\111\u0127" +
    "\131\224\001\002\000\004\111\u0128\001\002\000\004\123" +
    "\u0129\001\002\000\004\131\u012a\001\002\000\072\002\uff99" +
    "\014\uff99\033\uff99\034\uff99\040\uff99\041\uff99\042\uff99\045" +
    "\uff99\046\uff99\052\uff99\053\uff99\055\uff99\061\uff99\062\uff99" +
    "\064\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\126\uff99" +
    "\133\uff99\001\002\000\026\012\106\013\077\077\022\100" +
    "\061\103\100\121\107\124\104\133\105\134\103\135\075" +
    "\001\002\000\036\102\121\103\114\104\120\105\123\106" +
    "\117\111\124\112\115\113\122\114\113\116\116\117\126" +
    "\120\112\122\125\123\u012d\001\002\000\004\125\u012e\001" +
    "\002\000\062\014\023\033\021\034\014\040\006\041\042" +
    "\042\035\045\037\046\054\052\005\053\043\055\034\061" +
    "\024\062\041\064\032\066\015\070\050\073\062\074\030" +
    "\075\052\076\013\077\022\100\061\101\016\133\036\001" +
    "\002\000\064\014\023\033\021\034\014\040\006\041\042" +
    "\042\035\045\037\046\054\052\005\053\043\055\034\061" +
    "\024\062\041\064\032\066\015\070\050\073\062\074\030" +
    "\075\052\076\013\077\022\100\061\101\016\126\u0130\133" +
    "\036\001\002\000\074\002\uffa7\014\uffa7\033\uffa7\034\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\045\uffa7\046\uffa7\052\uffa7\053" +
    "\uffa7\055\uffa7\061\uffa7\062\uffa7\064\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\126\uffa7\133\uffa7\001\002" +
    "\000\004\133\u0141\001\002\000\004\133\u013e\001\002\000" +
    "\072\002\uffe1\014\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\045\uffe1\046\uffe1\052\uffe1\053\uffe1\055\uffe1\061" +
    "\uffe1\062\uffe1\064\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101" +
    "\uffe1\126\uffe1\133\uffe1\001\002\000\004\133\u0135\001\002" +
    "\000\006\036\u0137\037\u0136\001\002\000\026\012\106\013" +
    "\077\077\022\100\061\103\100\121\107\124\104\133\105" +
    "\134\103\135\075\001\002\000\004\124\u013a\001\002\000" +
    "\004\131\u0139\001\002\000\072\002\uffe0\014\uffe0\033\uffe0" +
    "\034\uffe0\040\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\052" +
    "\uffe0\053\uffe0\055\uffe0\061\uffe0\062\uffe0\064\uffe0\066\uffe0" +
    "\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\101\uffe0\126\uffe0\133\uffe0\001\002" +
    "\000\020\004\314\005\317\006\315\007\322\010\316\011" +
    "\312\133\320\001\002\000\022\024\370\025\374\026\367" +
    "\027\373\030\366\032\372\123\u013c\130\365\001\002\000" +
    "\004\131\uffdd\001\002\000\006\130\154\131\uffdc\001\002" +
    "\000\006\036\u0137\037\u0136\001\002\000\004\131\u0140\001" +
    "\002\000\072\002\uffdf\014\uffdf\033\uffdf\034\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\045\uffdf\046\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\061\uffdf\062\uffdf\064\uffdf\066\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\126\uffdf\133\uffdf\001\002\000\004\035\u0142" +
    "\001\002\000\004\023\u0143\001\002\000\004\115\u0144\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\036\102\121\103\114\104\120\105\123\106\117\111\124" +
    "\112\115\113\122\114\113\116\116\117\126\120\112\122" +
    "\125\131\u0146\001\002\000\072\002\uffde\014\uffde\033\uffde" +
    "\034\uffde\040\uffde\041\uffde\042\uffde\045\uffde\046\uffde\052" +
    "\uffde\053\uffde\055\uffde\061\uffde\062\uffde\064\uffde\066\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076" +
    "\uffde\077\uffde\100\uffde\101\uffde\126\uffde\133\uffde\001\002" +
    "\000\026\012\106\013\077\077\022\100\061\103\100\121" +
    "\107\124\104\133\105\134\103\135\075\001\002\000\036" +
    "\102\121\103\114\104\120\105\123\106\117\111\124\112" +
    "\115\113\122\114\113\116\116\117\126\120\112\122\125" +
    "\123\u0149\001\002\000\004\131\u014a\001\002\000\072\002" +
    "\uff9c\014\uff9c\033\uff9c\034\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\045\uff9c\046\uff9c\052\uff9c\053\uff9c\055\uff9c\061\uff9c\062" +
    "\uff9c\064\uff9c\066\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\126" +
    "\uff9c\133\uff9c\001\002\000\072\002\uffdb\014\uffdb\033\uffdb" +
    "\034\uffdb\040\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\061\uffdb\062\uffdb\064\uffdb\066\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\126\uffdb\133\uffdb\001\002" +
    "\000\004\133\u0156\001\002\000\004\133\u0154\001\002\000" +
    "\004\133\u0152\001\002\000\004\133\u0150\001\002\000\004" +
    "\131\u0151\001\002\000\072\002\uffda\014\uffda\033\uffda\034" +
    "\uffda\040\uffda\041\uffda\042\uffda\045\uffda\046\uffda\052\uffda" +
    "\053\uffda\055\uffda\061\uffda\062\uffda\064\uffda\066\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\126\uffda\133\uffda\001\002\000" +
    "\004\131\u0153\001\002\000\072\002\uffd9\014\uffd9\033\uffd9" +
    "\034\uffd9\040\uffd9\041\uffd9\042\uffd9\045\uffd9\046\uffd9\052" +
    "\uffd9\053\uffd9\055\uffd9\061\uffd9\062\uffd9\064\uffd9\066\uffd9" +
    "\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076" +
    "\uffd9\077\uffd9\100\uffd9\101\uffd9\126\uffd9\133\uffd9\001\002" +
    "\000\004\131\u0155\001\002\000\072\002\uffd8\014\uffd8\033" +
    "\uffd8\034\uffd8\040\uffd8\041\uffd8\042\uffd8\045\uffd8\046\uffd8" +
    "\052\uffd8\053\uffd8\055\uffd8\061\uffd8\062\uffd8\064\uffd8\066" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\101\uffd8\126\uffd8\133\uffd8\001" +
    "\002\000\004\131\u0157\001\002\000\072\002\uffd7\014\uffd7" +
    "\033\uffd7\034\uffd7\040\uffd7\041\uffd7\042\uffd7\045\uffd7\046" +
    "\uffd7\052\uffd7\053\uffd7\055\uffd7\061\uffd7\062\uffd7\064\uffd7" +
    "\066\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\126\uffd7\133\uffd7" +
    "\001\002\000\004\133\u0159\001\002\000\004\124\u015a\001" +
    "\002\000\026\012\106\013\077\077\022\100\061\103\100" +
    "\121\107\124\104\133\105\134\103\135\075\001\002\000" +
    "\006\123\u015c\130\154\001\002\000\004\050\u015d\001\002" +
    "\000\004\124\u015e\001\002\000\026\012\106\013\077\077" +
    "\022\100\061\103\100\121\107\124\104\133\105\134\103" +
    "\135\075\001\002\000\006\123\u0160\130\154\001\002\000" +
    "\076\002\uffc8\014\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\045\uffc8\046\uffc8\051\uffc8\052\uffc8\053\uffc8\055" +
    "\uffc8\061\uffc8\062\uffc8\064\uffc8\066\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\126\uffc8\131\uffc8\133\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\100\002\024\003\037\004\056\005\046\006" +
    "\052\007\071\010\003\011\016\012\057\013\045\014\006" +
    "\015\062\016\007\026\070\027\054\031\025\032\066\033" +
    "\050\036\055\037\065\040\063\042\064\043\030\044\067" +
    "\047\043\051\032\052\017\053\010\054\011\055\026\056" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u014a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\310\001\001\000" +
    "\002\001\001\000\016\035\304\054\107\055\100\060\150" +
    "\061\075\062\272\001\001\000\004\025\301\001\001\000" +
    "\002\001\001\000\012\054\107\055\100\060\274\061\075" +
    "\001\001\000\074\004\202\005\046\006\052\007\071\010" +
    "\003\011\016\012\057\013\045\014\006\015\062\016\007" +
    "\026\070\027\054\031\025\032\066\033\050\036\055\037" +
    "\065\040\063\042\064\043\030\044\067\047\043\051\032" +
    "\052\017\053\010\054\011\055\026\056\044\001\001\000" +
    "\002\001\001\000\004\025\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\107\055\100\060\101" +
    "\061\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\107\055\100\060\145\061\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\054\107\055\100\060\143\061\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\107\055" +
    "\100\060\110\061\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\107\055\100\060\142\061\075\001" +
    "\001\000\012\054\107\055\100\060\141\061\075\001\001" +
    "\000\012\054\107\055\100\060\140\061\075\001\001\000" +
    "\012\054\107\055\100\060\137\061\075\001\001\000\012" +
    "\054\107\055\100\060\136\061\075\001\001\000\012\054" +
    "\107\055\100\060\135\061\075\001\001\000\012\054\107" +
    "\055\100\060\134\061\075\001\001\000\012\054\107\055" +
    "\100\060\133\061\075\001\001\000\012\054\107\055\100" +
    "\060\132\061\075\001\001\000\012\054\107\055\100\060" +
    "\131\061\075\001\001\000\012\054\107\055\100\060\130" +
    "\061\075\001\001\000\012\054\107\055\100\060\127\061" +
    "\075\001\001\000\012\054\107\055\100\060\126\061\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\054\107\055\100\060\150" +
    "\061\075\062\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\107\055\100\060\155" +
    "\061\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\107\055\100" +
    "\060\161\061\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\054\107\055\100\060\167\061\075\001\001\000" +
    "\002\001\001\000\012\054\107\055\100\060\171\061\075" +
    "\001\001\000\002\001\001\000\004\050\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\200\004\056\005\046\006\052\007" +
    "\071\010\003\011\016\012\057\013\045\014\006\015\062" +
    "\016\007\026\070\027\054\031\025\032\066\033\050\036" +
    "\055\037\065\040\063\042\064\043\030\044\067\047\043" +
    "\051\032\052\017\053\010\054\011\055\026\056\044\001" +
    "\001\000\074\004\202\005\046\006\052\007\071\010\003" +
    "\011\016\012\057\013\045\014\006\015\062\016\007\026" +
    "\070\027\054\031\025\032\066\033\050\036\055\037\065" +
    "\040\063\042\064\043\030\044\067\047\043\051\032\052" +
    "\017\053\010\054\011\055\026\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\211\001\001\000\002\001\001\000\014\054" +
    "\107\055\100\060\150\061\075\062\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\054\107\055\100\060\150\061\075\062\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\107" +
    "\055\100\060\226\061\075\001\001\000\002\001\001\000" +
    "\004\034\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\107\055\100\060\234\061" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\237\046\241\001\001\000\004\046\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\107\055\100" +
    "\060\243\061\075\001\001\000\002\001\001\000\076\003" +
    "\245\004\056\005\046\006\052\007\071\010\003\011\016" +
    "\012\057\013\045\014\006\015\062\016\007\026\070\027" +
    "\054\031\025\032\066\033\050\036\055\037\065\040\063" +
    "\042\064\043\030\044\067\047\043\051\032\052\017\053" +
    "\010\054\011\055\026\056\044\001\001\000\074\004\202" +
    "\005\046\006\052\007\071\010\003\011\016\012\057\013" +
    "\045\014\006\015\062\016\007\026\070\027\054\031\025" +
    "\032\066\033\050\036\055\037\065\040\063\042\064\043" +
    "\030\044\067\047\043\051\032\052\017\053\010\054\011" +
    "\055\026\056\044\001\001\000\076\003\247\004\056\005" +
    "\046\006\052\007\071\010\003\011\016\012\057\013\045" +
    "\014\006\015\062\016\007\026\070\027\054\031\025\032" +
    "\066\033\050\036\055\037\065\040\063\042\064\043\030" +
    "\044\067\047\043\051\032\052\017\053\010\054\011\055" +
    "\026\056\044\001\001\000\074\004\202\005\046\006\052" +
    "\007\071\010\003\011\016\012\057\013\045\014\006\015" +
    "\062\016\007\026\070\027\054\031\025\032\066\033\050" +
    "\036\055\037\065\040\063\042\064\043\030\044\067\047" +
    "\043\051\032\052\017\053\010\054\011\055\026\056\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\035" +
    "\271\054\107\055\100\060\150\061\075\062\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\054\107\055\100\060\277\061\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\054\107\055" +
    "\100\060\150\061\075\062\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\325\004\056\005\046\006\052\007" +
    "\071\010\003\011\016\012\057\013\045\014\006\015\062" +
    "\016\007\026\070\027\054\031\025\032\066\033\050\036" +
    "\055\037\065\040\063\042\064\043\030\044\067\047\043" +
    "\051\032\052\017\053\010\054\011\055\026\056\044\001" +
    "\001\000\074\004\202\005\046\006\052\007\071\010\003" +
    "\011\016\012\057\013\045\014\006\015\062\016\007\026" +
    "\070\027\054\031\025\032\066\033\050\036\055\037\065" +
    "\040\063\042\064\043\030\044\067\047\043\051\032\052" +
    "\017\053\010\054\011\055\026\056\044\001\001\000\002" +
    "\001\001\000\012\054\107\055\100\060\330\061\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\003\333" +
    "\004\056\005\046\006\052\007\071\010\003\011\016\012" +
    "\057\013\045\014\006\015\062\016\007\026\070\027\054" +
    "\031\025\032\066\033\050\036\055\037\065\040\063\042" +
    "\064\043\030\044\067\047\043\051\032\052\017\053\010" +
    "\054\011\055\026\056\044\001\001\000\074\004\202\005" +
    "\046\006\052\007\071\010\003\011\016\012\057\013\045" +
    "\014\006\015\062\016\007\026\070\027\054\031\025\032" +
    "\066\033\050\036\055\037\065\040\063\042\064\043\030" +
    "\044\067\047\043\051\032\052\017\053\010\054\011\055" +
    "\026\056\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\054\107\055\100\060\337\061\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\035" +
    "\346\054\107\055\100\060\150\061\075\062\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\361\057\362\001\001\000\004\021\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u0106\057\362\001\001\000\004\021" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u010b\057\362\001\001\000\004\021" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u0111\057\362\001" +
    "\001\000\004\021\370\001\001\000\004\057\u0113\001\001" +
    "\000\002\001\001\000\076\003\u0115\004\056\005\046\006" +
    "\052\007\071\010\003\011\016\012\057\013\045\014\006" +
    "\015\062\016\007\026\070\027\054\031\025\032\066\033" +
    "\050\036\055\037\065\040\063\042\064\043\030\044\067" +
    "\047\043\051\032\052\017\053\010\054\011\055\026\056" +
    "\044\001\001\000\074\004\202\005\046\006\052\007\071" +
    "\010\003\011\016\012\057\013\045\014\006\015\062\016" +
    "\007\026\070\027\054\031\025\032\066\033\050\036\055" +
    "\037\065\040\063\042\064\043\030\044\067\047\043\051" +
    "\032\052\017\053\010\054\011\055\026\056\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\107\055\100\060\u011b\061\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\054\107\055\100\060\u012b\061\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\003\u012e\004\056\005" +
    "\046\006\052\007\071\010\003\011\016\012\057\013\045" +
    "\014\006\015\062\016\007\026\070\027\054\031\025\032" +
    "\066\033\050\036\055\037\065\040\063\042\064\043\030" +
    "\044\067\047\043\051\032\052\017\053\010\054\011\055" +
    "\026\056\044\001\001\000\074\004\202\005\046\006\052" +
    "\007\071\010\003\011\016\012\057\013\045\014\006\015" +
    "\062\016\007\026\070\027\054\031\025\032\066\033\050" +
    "\036\055\037\065\040\063\042\064\043\030\044\067\047" +
    "\043\051\032\052\017\053\010\054\011\055\026\056\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0137" +
    "\001\001\000\014\054\107\055\100\060\150\061\075\062" +
    "\u013c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u013a\057\362\001\001\000\004\021" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\054\107\055\100\060\u0144\061\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\107\055\100\060\u0147" +
    "\061\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\054\107\055\100\060\150\061\075\062\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\054\107\055\100\060\150\061\075\062\u015e\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserU$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserU$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserU$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String nombreArchivo = "";
    /* Reporte de error encontrado. */
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right + 1) + " columna "+ s.left + "Identificador " + s.value + "no reconocido");
    }

   /* errores fatales */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null, "Error sintactico en la linea "+ scannerU.linea + " columna " + scannerU.columna + " Sym = [" + s.value +", "+s.sym+ "] no reconocido, en archivo: "+nombreArchivo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserU$actions {
  private final parserU parser;

  /** Constructor */
  CUP$parserU$actions(parserU parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserU$do_action(
    int                        CUP$parserU$act_num,
    java_cup.runtime.lr_parser CUP$parserU$parser,
    java.util.Stack            CUP$parserU$stack,
    int                        CUP$parserU$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserU$result;

      /* select the action based on the action number */
      switch (CUP$parserU$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // enviados ::= valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("enviados",48, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // enviados ::= enviados COMA valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("enviados",48, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // llamada ::= ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("llamada",47, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // llamada ::= llamada PUNTO ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("llamada",47, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // llamada ::= llamada PAR1 PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("llamada",47, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // llamada ::= llamada PAR1 enviados PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("llamada",47, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor ::= fechahora 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor ::= fecha 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= FALSO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= VERDADERO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= NUMERO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= llamada 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= PAR1 valor PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= NOT valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= MENOS valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= valor OR valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= valor AND valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= valor MAYORIGUAL valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= valor MAYOR valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= valor MENORIGUAL valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= valor MENOR valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= valor NOIGUAL valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= valor IGUALIGUAL valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor ::= valor POT valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor ::= valor DIV valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor ::= valor POR valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor ::= valor MENOS valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor ::= valor MAS valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("valor",46, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= DATETIME 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= DATE 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= BOOL 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= DOUBLE 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= INTEGER 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= TEXT 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipo",45, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // contar ::= CONTAR PAR1 MENOR MENOR seleccionar MAYOR MAYOR PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("contar",44, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-8)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fechahora ::= FECHA_HORA PAR1 PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("fechahora",43, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // fecha ::= FECHA PAR1 PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("fecha",42, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // imprimir ::= IMPRIMIR PAR1 valor PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("imprimir",41, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-4)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // detener ::= DETENER PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("detener",40, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // mientras ::= MIENTRAS PAR1 valor PAR2 LLA1 sentencias LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("mientras",39, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paso ::= MENOSMENOS 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("paso",38, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paso ::= MASMAS 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("paso",38, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // para ::= PARA PAR1 DECLARAR ID INTEGER IGUAL valor PUNTOYCOMA valor PUNTOYCOMA paso PAR2 LLA1 sentencias LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("para",37, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-14)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // caso ::= DEFECTO DOSPUNTOS sentencias 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // caso ::= CASO valor DOSPUNTOS sentencias 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // casos ::= caso 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // casos ::= casos caso 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // selecciona ::= SELECCIONA PAR1 valor PAR2 LLA1 casos LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("selecciona",34, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // si ::= SI PAR1 valor PAR2 LLA1 sentencias LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("si",33, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // si ::= si SINO LLA1 sentencias LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("si",33, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-4)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= ID IGUAL valor PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listId ::= ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("listId",31, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listId ::= listId COMA ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("listId",31, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion ::= DECLARAR listId tipo 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion ::= declaracion IGUAL valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ssl ::= contar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ssl ::= fechahora 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ssl ::= fecha 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ssl ::= imprimir 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ssl ::= detener 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ssl ::= mientras 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ssl ::= para 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ssl ::= selecciona 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ssl ::= si 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ssl ::= asignacion 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ssl ::= declaracion PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ssl",6, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // denegar ::= DENEGAR PERMISOS ID COMA ID PUNTO seleccionCampos PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("denegar",29, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-7)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // otorgar ::= OTORGAR PERMISOS ID COMA ID PUNTO seleccionCampos PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("otorgar",28, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-7)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dcl ::= denegar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dcl",5, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dcl ::= otorgar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dcl",5, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // seleccionCampos ::= enviados 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionCampos",27, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seleccionCampos ::= ASTERISCO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionCampos",27, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipoOrden ::= DESC 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoOrden",26, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipoOrden ::= ASC 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoOrden",26, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // seleccionar ::= SELECCIONAR seleccionCampos DE enviados 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionar",25, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // seleccionar ::= seleccionar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionar",25, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // seleccionar ::= seleccionar DONDE valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionar",25, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // seleccionar ::= seleccionar ORDENAR_POR ID tipoOrden 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("seleccionar",25, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // borrar ::= BORRAR EN TABLA ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("borrar",24, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // borrar ::= borrar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("borrar",24, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // borrar ::= borrar DONDE valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("borrar",24, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // actualizar ::= ACTUALIZAR TABLA ID PAR1 enviados PAR2 VALORES PAR1 enviados PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("actualizar",23, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-9)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // actualizar ::= actualizar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("actualizar",23, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // actualizar ::= actualizar DONDE valor 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("actualizar",23, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoInsertar ::= PAR1 enviados PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoInsertar",22, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoInsertar ::= tipoInsertar VALORES PAR1 enviados PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoInsertar",22, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-4)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insertar ::= INSERTAR EN TABLA ID tipoInsertar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("insertar",21, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-5)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dml ::= seleccionar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dml",4, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dml ::= borrar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dml",4, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dml ::= actualizar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dml",4, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dml ::= insertar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("dml",4, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // retorno ::= RETORNO valor PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // restaurar ::= RESTAURAR tipoBackup CADENA PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("restaurar",12, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoBackup ::= COMPLETO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoBackup",19, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoBackup ::= USQLDUMP 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoBackup",19, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // backup ::= BACKUP tipoBackup ID ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("backup",11, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-4)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // eliminarCosa ::= USUARIO ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("eliminarCosa",18, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // eliminarCosa ::= OBJETO ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("eliminarCosa",18, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // eliminarCosa ::= BASE_DATOS ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("eliminarCosa",18, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // eliminarCosa ::= TABLA ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("eliminarCosa",18, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // eliminar ::= ELIMINAR eliminarCosa 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("eliminar",10, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoAlterar ::= QUITAR enviados 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoAlterar",17, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoAlterar ::= AGREGAR PAR1 atrTabla PAR2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("tipoAlterar",17, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // alterarCosa ::= USUARIO ID CAMBIAR PASSWORD IGUAL valor PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("alterarCosa",16, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // alterarCosa ::= OBJETO ID tipoAlterar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("alterarCosa",16, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alterarCosa ::= TABLA ID tipoAlterar PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("alterarCosa",16, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // alterar ::= ALTERAR alterarCosa 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("alterar",9, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // usar ::= USAR ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("usar",8, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // complemento ::= UNICO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // complemento ::= LLAVE_FORANEA REFERENCIA ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // complemento ::= LLAVE_PRIMARIA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // complemento ::= AUTOINCREMENTABLE 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // complemento ::= NO_NULO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // complemento ::= NULO 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("complemento",15, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atrTabla ::= tipo ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("atrTabla",14, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atrTabla ::= atrTabla complemento 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("atrTabla",14, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atrTabla ::= atrTabla COMA tipo ID 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("atrTabla",14, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-3)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // crearCosa ::= USUARIO ID COLOCAR PASSWORD IGUAL valor PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // crearCosa ::= FUNCION ID PAR1 atrTabla PAR2 tipo LLA1 sentencias LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-8)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // crearCosa ::= PROCEDIMIENTO ID PAR1 atrTabla PAR2 LLA1 LLA2 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-6)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // crearCosa ::= OBJETO ID PAR1 atrTabla PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-5)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // crearCosa ::= TABLA ID PAR1 atrTabla PAR2 PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-5)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // crearCosa ::= BASE_DATOS ID PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crearCosa",13, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-2)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // crear ::= CREAR crearCosa 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("crear",7, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ddl ::= retorno 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ddl ::= restaurar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ddl ::= backup 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ddl ::= eliminar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ddl ::= alterar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ddl ::= usar 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ddl ::= crear 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("ddl",3, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= ssl 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= dcl 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= dml 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= ddl 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencia 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= sentencias sentencia 
            {
              String RESULT =null;

              CUP$parserU$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentencias 
            {
              String RESULT =null;
		System.out.println("Compilacion USQL exitosa!!! XD");
              CUP$parserU$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          return CUP$parserU$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserU$stack.elementAt(CUP$parserU$top-1)).value;
		RESULT = start_val;
              CUP$parserU$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserU$stack.elementAt(CUP$parserU$top-1)), ((java_cup.runtime.Symbol)CUP$parserU$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserU$parser.done_parsing();
          return CUP$parserU$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

