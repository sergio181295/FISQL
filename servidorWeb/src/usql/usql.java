/* Generated By:JavaCC: Do not edit this line. usql.java */
import java.io.*;
 public class usql implements usqlConstants {

  static final public nodoParser inicio() throws ParseException {
    sentencias();
  }

  static final public nodoParser sentencias() throws ParseException {
    sentencia();
    sentencias2();
  }

  static final public nodoParser sentencias2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREAR:
    case USAR:
    case ALTERAR:
    case ELIMINAR:
    case BACKUP:
    case RESTAURAR:
    case RETORNO:
    case INSERTAR:
    case ACTUALIZAR:
    case BORRAR:
    case SELECCIONAR:
    case OTORGAR:
    case DENEGAR:
    case DECLARAR:
    case SI:
    case SELECCIONA:
    case PARA:
    case MIENTRAS:
    case DETENER:
    case IMPRIMIR:
    case FECHA:
    case FECHA_HORA:
    case CONTAR:
    case ID:
      sentencia();
      sentencias2();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREAR:
    case USAR:
    case ALTERAR:
    case ELIMINAR:
    case BACKUP:
    case RESTAURAR:
    case RETORNO:
      ddl();
      break;
    case INSERTAR:
    case ACTUALIZAR:
    case BORRAR:
    case SELECCIONAR:
      dml();
      break;
    case OTORGAR:
    case DENEGAR:
      dcl();
      break;
    case DECLARAR:
    case SI:
    case SELECCIONA:
    case PARA:
    case MIENTRAS:
    case DETENER:
    case IMPRIMIR:
    case FECHA:
    case FECHA_HORA:
    case CONTAR:
    case ID:
      ssl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** SENTENCIAS DDL */
  static final public nodoParser ddl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREAR:
      crear();
      break;
    case USAR:
      usar();
      break;
    case ALTERAR:
      alterar();
      break;
    case ELIMINAR:
      eliminar();
      break;
    case BACKUP:
      backup();
      break;
    case RESTAURAR:
      restaurar();
      break;
    case RETORNO:
      retorno();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

    //DDL CREAR
  static final public nodoParser crear() throws ParseException {
    jj_consume_token(CREAR);
    crearCosa();
  }

  static final public nodoParser crearCosa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_DATOS:
      jj_consume_token(BASE_DATOS);
      jj_consume_token(ID);
      jj_consume_token(PUNTOYCOMA);
      break;
    case TABLA:
      jj_consume_token(TABLA);
      jj_consume_token(ID);
      jj_consume_token(PAR1);
      atrTabla();
      jj_consume_token(PAR2);
      jj_consume_token(PUNTOYCOMA);
      break;
    case OBJETO:
      jj_consume_token(OBJETO);
      jj_consume_token(ID);
      jj_consume_token(PAR1);
      atrTabla();
      jj_consume_token(PAR2);
      jj_consume_token(PUNTOYCOMA);
      break;
    case PROCEDIMIENTO:
      jj_consume_token(PROCEDIMIENTO);
      jj_consume_token(ID);
      jj_consume_token(PAR1);
      atrTabla();
      jj_consume_token(PAR2);
      jj_consume_token(LLA1);
      sentencias();
      jj_consume_token(LLA2);
      break;
    case FUNCION:
      jj_consume_token(FUNCION);
      jj_consume_token(ID);
      jj_consume_token(PAR1);
      atrTabla();
      jj_consume_token(PAR2);
      tipo();
      jj_consume_token(LLA1);
      sentencias();
      jj_consume_token(LLA2);
      break;
    case USUARIO:
      jj_consume_token(USUARIO);
      jj_consume_token(ID);
      jj_consume_token(COLOCAR);
      jj_consume_token(PASSWORD);
      jj_consume_token(IGUAL);
      valor();
      jj_consume_token(PUNTOYCOMA);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser atrTabla() throws ParseException {
    tipo();
    jj_consume_token(ID);
    atrTabla2();
  }

  static final public nodoParser atrTabla2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      tipo();
      jj_consume_token(ID);
      atrTabla2();
      break;
    case NULO:
    case NO_NULO:
    case AUTOINCREMENTABLE:
    case LLAVE_PRIMARIA:
    case LLAVE_FORANEA:
    case UNICO:
      complemento();
      atrTabla2();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser complemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULO:
      jj_consume_token(NULO);
      break;
    case NO_NULO:
      jj_consume_token(NO_NULO);
      break;
    case AUTOINCREMENTABLE:
      jj_consume_token(AUTOINCREMENTABLE);
      break;
    case LLAVE_PRIMARIA:
      jj_consume_token(LLAVE_PRIMARIA);
      break;
    case LLAVE_FORANEA:
      jj_consume_token(LLAVE_FORANEA);
      jj_consume_token(REFERENCIA);
      jj_consume_token(ID);
      break;
    case UNICO:
      jj_consume_token(UNICO);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser retorno() throws ParseException {
    jj_consume_token(RETORNO);
    valor();
    jj_consume_token(CADENA);
    jj_consume_token(PUNTOYCOMA);
  }

    //DDL USAR
  static final public nodoParser usar() throws ParseException {
    jj_consume_token(USAR);
    jj_consume_token(ID);
    jj_consume_token(PUNTOYCOMA);
  }

    //DDL ALTERAR
  static final public nodoParser alterar() throws ParseException {
    jj_consume_token(ALTERAR);
    alterarCosa();
  }

  static final public nodoParser alterarCosa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLA:
      jj_consume_token(TABLA);
      jj_consume_token(ID);
      tipoAlterar();
      jj_consume_token(PUNTOYCOMA);
      break;
    case OBJETO:
      jj_consume_token(OBJETO);
      jj_consume_token(ID);
      tipoAlterar();
      jj_consume_token(PUNTOYCOMA);
      break;
    case USUARIO:
      jj_consume_token(USUARIO);
      jj_consume_token(ID);
      jj_consume_token(CAMBIAR);
      jj_consume_token(PASSWORD);
      jj_consume_token(IGUAL);
      valor();
      jj_consume_token(PUNTOYCOMA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser tipoAlterar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGREGAR:
      jj_consume_token(AGREGAR);
      jj_consume_token(PAR1);
      atrTabla();
      jj_consume_token(PAR2);
      break;
    case QUITAR:
      jj_consume_token(QUITAR);
      enviados();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

    //DDL ELIMINAR
  static final public nodoParser eliminar() throws ParseException {
    jj_consume_token(ELIMINAR);
    eliminarCosa();
  }

  static final public nodoParsere eliminarCosa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLA:
      jj_consume_token(TABLA);
      jj_consume_token(ID);
      jj_consume_token(PUNTOYCOMA);
      break;
    case BASE_DATOS:
      jj_consume_token(BASE_DATOS);
      jj_consume_token(ID);
      jj_consume_token(PUNTOYCOMA);
      break;
    case OBJETO:
      jj_consume_token(OBJETO);
      jj_consume_token(ID);
      jj_consume_token(PUNTOYCOMA);
      break;
    case USUARIO:
      jj_consume_token(USUARIO);
      jj_consume_token(ID);
      jj_consume_token(PUNTOYCOMA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

    //DDL BACKUP
  static final public nodoParser backup() throws ParseException {
    jj_consume_token(BACKUP);
    tipoBackup();
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(PUNTOYCOMA);
  }

  static final public nodoParser tipoBackup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USQLDUMP:
      jj_consume_token(USQLDUMP);
      break;
    case COMPLETO:
      jj_consume_token(COMPLETO);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

    //DDL RESTAURAR
  static final public nodoParser restaurar() throws ParseException {
    jj_consume_token(RESTAURAR);
    tipoBackup();
    jj_consume_token(CADENA);
    jj_consume_token(PUNTOYCOMA);
  }

/** SENTENCIAS DML */
  static final public nodoParser dml() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERTAR:
      insertar();
      break;
    case ACTUALIZAR:
      actualizar();
      jj_consume_token(PUNTOYCOMA);
      break;
    case BORRAR:
      borrar();
      jj_consume_token(PUNTOYCOMA);
      break;
    case SELECCIONAR:
      seleccionar();
      jj_consume_token(PUNTOYCOMA);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //DML INSERTAR
  static final public nodoParser insertar() throws ParseException {
    jj_consume_token(INSERTAR);
    jj_consume_token(EN);
    jj_consume_token(TABLA);
    jj_consume_token(ID);
    tipoInsertar();
    jj_consume_token(PUNTOYCOMA);
  }

  static final public nodoParser tipoInsertar() throws ParseException {
    jj_consume_token(PAR1);
    enviados();
    jj_consume_token(PAR2);
    tipoInsertar2();
  }

  static final public nodoParser tipoInsertar2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALORES:
      jj_consume_token(VALORES);
      jj_consume_token(PAR1);
      enviados();
      jj_consume_token(PAR2);
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //DML ACTUALIZAR
  static final public nodoParser actualizar() throws ParseException {
    jj_consume_token(ACTUALIZAR);
    jj_consume_token(TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR1);
    enviados();
    jj_consume_token(PAR2);
    jj_consume_token(VALORES);
    jj_consume_token(PAR1);
    enviados();
    jj_consume_token(PAR2);
    restricciones();
  }

  static final public nodoParser restricciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DONDE:
      jj_consume_token(DONDE);
      valor();
      restricciones();
      break;
    case ORDENAR_POR:
      jj_consume_token(ORDENAR_POR);
      jj_consume_token(ID);
      tipoOrden();
      restricciones();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //DML BORRAR
  static final public nodoParser borrar() throws ParseException {
    jj_consume_token(BORRAR);
    jj_consume_token(EN);
    jj_consume_token(TABLA);
    jj_consume_token(ID);
    restricciones();
  }

      //DML SELECCIONAR
  static final public nodoParser seleccionar() throws ParseException {
    jj_consume_token(SELECCIONAR);
    seleccionCampos();
    jj_consume_token(DE);
    enviados();
    restricciones();
  }

  static final public nodoParser tipoOrden() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
      jj_consume_token(ASC);
      break;
    case DESC:
      jj_consume_token(DESC);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser seleccionCampos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISCO:
      jj_consume_token(ASTERISCO);
      break;
    case VERDADERO:
    case FALSO:
    case FECHA:
    case FECHA_HORA:
    case MENOS:
    case NOT:
    case PAR1:
    case ID:
    case NUMERO:
    case CADENA:
      enviados();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** SENTENCIAS DCL */
  static final public nodoParser dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTORGAR:
      otorgar();
      break;
    case DENEGAR:
      denegar();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //DCL OTORGAR
  static final public nodoParser otorgar() throws ParseException {
    jj_consume_token(OTORGAR);
    jj_consume_token(PERMISOS);
    jj_consume_token(ID);
    jj_consume_token(COMA);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    seleccionCampos();
    jj_consume_token(PUNTOYCOMA);
  }

      //DCL DENEGAR
  static final public nodoParser denegar() throws ParseException {
    jj_consume_token(DENEGAR);
    jj_consume_token(PERMISOS);
    jj_consume_token(ID);
    jj_consume_token(COMA);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    seleccionCampos();
    jj_consume_token(PUNTOYCOMA);
  }

/** SENTENCIAS SSL */
  static final public nodoParser ssl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARAR:
      declaracion();
      jj_consume_token(PUNTOYCOMA);
      break;
    case ID:
      asignacion();
      break;
    case SI:
      si();
      break;
    case SELECCIONA:
      selecciona();
      break;
    case PARA:
      para();
      break;
    case MIENTRAS:
      mientras();
      break;
    case DETENER:
      detener();
      break;
    case IMPRIMIR:
      imprimir();
      break;
    case FECHA:
      fecha();
      break;
    case FECHA_HORA:
      fechahora();
      break;
    case CONTAR:
      contar();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //SSL DECLARACION
  static final public nodoParser declaracion() throws ParseException {
    jj_consume_token(DECLARAR);
    listId();
    tipo();
    conValor();
  }

  static final public nodoParser conValor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      valor();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser listId() throws ParseException {
    jj_consume_token(ID);
    listId2();
  }

  static final public nodoParser listId2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      jj_consume_token(ID);
      listId2();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //SSL ASIGNACION
  static final public nodoParser asignacion() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    valor();
    jj_consume_token(PUNTOYCOMA);
  }

      //SSL SI
  static final public nodoParser si() throws ParseException {
    jj_consume_token(SI);
    jj_consume_token(PAR1);
    valor();
    jj_consume_token(PAR2);
    jj_consume_token(LLA1);
    sentencias();
    jj_consume_token(LLA2);
    sino();
  }

  static final public nodoParser sino() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      jj_consume_token(SINO);
      jj_consume_token(LLA1);
      sentencias();
      jj_consume_token(LLA2);
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //SS SELECCIONA
  static final public nodoParser selecciona() throws ParseException {
    jj_consume_token(SELECCIONA);
    jj_consume_token(PAR1);
    valor();
    jj_consume_token(PAR2);
    jj_consume_token(LLA1);
    casos();
    jj_consume_token(LLA2);
  }

  static final public nodoParser casos() throws ParseException {
    caso();
    casos2();
  }

  static final public nodoParser casos2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASO:
    case DEFECTO:
      caso();
      casos2();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser caso() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASO:
      jj_consume_token(CASO);
      valor();
      jj_consume_token(DOSPUNTOS);
      sentencias();
      break;
    case DEFECTO:
      jj_consume_token(DEFECTO);
      jj_consume_token(DOSPUNTOS);
      sentencias();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //SSL PARA
  static final public nodoParser para() throws ParseException {
    jj_consume_token(PARA);
    jj_consume_token(PAR1);
    jj_consume_token(DECLARAR);
    jj_consume_token(ID);
    jj_consume_token(INTEGER);
    jj_consume_token(IGUAL);
    valor();
    jj_consume_token(PUNTOYCOMA);
    valor();
    jj_consume_token(PUNTOYCOMA);
    paso();
    jj_consume_token(PAR2);
    jj_consume_token(LLA1);
    sentencias();
    jj_consume_token(LLA2);
  }

  static final public nodoParser paso() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MASMAS:
      jj_consume_token(MASMAS);
      break;
    case MENOSMENOS:
      jj_consume_token(MENOSMENOS);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

      //SSL MIENTRAS
  static final public nodoParser mientras() throws ParseException {
    jj_consume_token(MIENTRAS);
    jj_consume_token(PAR1);
    valor();
    jj_consume_token(PAR2);
    jj_consume_token(LLA1);
    sentencias();
    jj_consume_token(LLA2);
  }

      //SSL DETENER
  static final public nodoParser detener() throws ParseException {
    jj_consume_token(DETENER);
    jj_consume_token(PUNTOYCOMA);
  }

      //SSL IMPRIMIR
  static final public nodoParser imprimir() throws ParseException {
    jj_consume_token(IMPRIMIR);
    jj_consume_token(PAR1);
    valor();
    jj_consume_token(PAR2);
    jj_consume_token(PUNTOYCOMA);
  }

      //SSL FECHA Y HORA
  static final public nodoParser fecha() throws ParseException {
    jj_consume_token(FECHA);
    jj_consume_token(PAR1);
    jj_consume_token(PAR2);
    jj_consume_token(PUNTOYCOMA);
  }

  static final public nodoParser fechahora() throws ParseException {
    jj_consume_token(FECHA_HORA);
    jj_consume_token(PAR1);
    jj_consume_token(PAR2);
    jj_consume_token(PUNTOYCOMA);
  }

      //SSL CONTAR
  static final public nodoParser contar() throws ParseException {
    jj_consume_token(CONTAR);
    jj_consume_token(PAR1);
    jj_consume_token(MENOR);
    jj_consume_token(MENOR);
    seleccionar();
    jj_consume_token(MAYOR);
    jj_consume_token(MAYOR);
    jj_consume_token(PAR2);
    jj_consume_token(PUNTOYCOMA);
  }

  static final public nodoParser tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case DATE:
      jj_consume_token(DATE);
      break;
    case DATETIME:
      jj_consume_token(DATETIME);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//VARIABLES INICIAN CON @
  static final public nodoParser valor() throws ParseException {
    valor3();
    valorP();
  }

  static final public nodoParser valorP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      valor3();
      valorP();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor3() throws ParseException {
    valor31();
    valor3P();
  }

  static final public nodoParser valor3P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      valor31();
      valor3P();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor31() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      valor4();
      break;
    case VERDADERO:
    case FALSO:
    case FECHA:
    case FECHA_HORA:
    case MENOS:
    case PAR1:
    case ID:
    case NUMERO:
    case CADENA:
      valor4();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor4() throws ParseException {
    valor5();
    valor4P();
  }

  static final public nodoParser valor4P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      valor5();
      valor4P();
      break;
    case MENOR:
      jj_consume_token(MENOR);
      valor5();
      valor4P();
      break;
    case MAYORIGUAL:
      jj_consume_token(MAYORIGUAL);
      valor5();
      valor4P();
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      valor5();
      valor4P();
      break;
    case IGUALIGUAL:
      jj_consume_token(IGUALIGUAL);
      valor5();
      valor4P();
      break;
    case NOIGUAL:
      jj_consume_token(NOIGUAL);
      valor5();
      valor4P();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor5() throws ParseException {
    valor6();
    valor5P();
  }

  static final public nodoParser valor5P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      jj_consume_token(MAS);
      valor6();
      valor5P();
      break;
    case MENOR:
      jj_consume_token(MENOR);
      valor6();
      valor5P();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor6() throws ParseException {
    valor7();
    valor6P();
  }

  static final public nodoParser valor6P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      jj_consume_token(POR);
      valor7();
      valor6P();
      break;
    case DIV:
      jj_consume_token(DIV);
      valor7();
      valor6P();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor7() throws ParseException {
    valor9();
    valor7P();
  }

  static final public nodoParser valor7P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POT:
      jj_consume_token(POT);
      valor9();
      valor7P();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser valor9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case VERDADERO:
      jj_consume_token(VERDADERO);
      break;
    case FALSO:
      jj_consume_token(FALSO);
      break;
    case MENOS:
      jj_consume_token(MENOS);
      valor9();
      break;
    case ID:
      llamada();
      break;
    case FECHA:
      fecha();
      break;
    case FECHA_HORA:
      fechahora();
      break;
    case PAR1:
      jj_consume_token(PAR1);
      valor();
      jj_consume_token(PAR2);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser llamada() throws ParseException {
    jj_consume_token(ID);
    llamadaP();
  }

  static final public nodoParser llamadaP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR1:
      jj_consume_token(PAR1);
      llamadaP2();
      break;
    case PUNTO:
      jj_consume_token(PUNTO);
      jj_consume_token(ID);
      llamadaP();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser llamadaP2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERDADERO:
    case FALSO:
    case FECHA:
    case FECHA_HORA:
    case MENOS:
    case NOT:
    case PAR1:
    case ID:
    case NUMERO:
    case CADENA:
      enviados();
      jj_consume_token(PAR2);
      llamadaP();
      break;
    case PAR2:
      jj_consume_token(PAR2);
      llamadaP();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser enviados() throws ParseException {
    valor();
    enviadosP();
  }

  static final public nodoParser enviadosP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      valor();
      enviadosP();
      break;
    case ASTERISCO:
      epsilon();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public nodoParser epsilon() throws ParseException {
    jj_consume_token(ASTERISCO);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public usqlTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8c000400,0x8c000400,0x8c000400,0x1f800,0x2f80000,0x2f80000,0x13000,0x60000000,0x13800,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x300,0x0,0x0,0x0,0x0,0x300,0x0,0x300,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfe5b1633,0xfe5b1633,0x13,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x1620,0x80,0x900,0xc000,0x60000000,0x30000,0xfe580000,0x0,0x0,0x200000,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x60000000,0x0,0x60000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x6000000,0x4000000,0x0,0x0,0x2400000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x0,0x1e088002,0x0,0x4000000,0x2010000,0x2400000,0x2000000,0x2000000,0x0,0x60,0x4000000,0x2002000,0x2004000,0x1c088002,0x2001f80,0x2000081,0x200000c,0x2000010,0x1c080002,0x2280000,0x1c188002,0x2400000,};
   }

  /** Constructor with InputStream. */
  public usql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public usql(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new usqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public usql(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new usqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public usql(usqlTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(usqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 }
