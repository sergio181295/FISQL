/* Generated By:JavaCC: Do not edit this line. usqlTokenManager.java */
package usql;
import compilador.nodoParser;

/** Token Manager. */
public class usqlTokenManager implements usqlConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 40:
         jjmatchedKind = 83;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 84;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 43:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 44:
         jjmatchedKind = 86;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 46:
         jjmatchedKind = 85;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 67;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 88;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 87;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 61:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 62:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x420028200000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40100000840L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8080000810020400L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x90aa10000000098L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x4080000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x6000000000008200L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1000002000000004L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1080000002000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x204000000044000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1201000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x70100000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1020L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x406010000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8000000100L, 0x0L);
      case 94:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x420028200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40100000840L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8080000810020400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x90aa10000000098L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4080000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x6000000000008200L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000002000000004L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1080000002000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x204000000044000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1201000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x70100000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1020L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x406010000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000100L, 0x0L);
      case 123:
         jjmatchedKind = 81;
         return jjMoveNfa_0(0, 0);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 125:
         jjmatchedKind = 82;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x280008110041a90L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x694e901201000120L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 73:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x88c00000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000004L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000050800120048L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004400L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x400404010000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x40288000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x280008110041a90L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x694e901201000120L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 105:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x88c00000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000004L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000050800120048L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400404010000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40288000L, active1, 0L);
      case 124:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c00000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 67:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6008000100000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000400L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000001000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0xc2000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x401080000a0200L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8022010000008000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000004040L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x204040020000100L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80802200040800L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x800021008200094L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c00000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6008000100000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000400L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000001000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc2000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x401080000a0200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8022010000008000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000004040L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x204040020000100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80802200040800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800021008200094L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10400L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000008L);
      case 67:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200c000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000100L);
      case 69:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x942182029002884L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 76:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400001000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000100000L);
      case 79:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x9000220000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 82:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1001040000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200L);
      case 84:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000240000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L);
      case 97:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10400L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000008L);
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200c000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000100L);
      case 101:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x942182029002884L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 108:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400001000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000100000L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x9000220000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1001040000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200L);
      case 116:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000240000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc008060240000100L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x140100000020000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 69:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc04000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000020000004L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000090208000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000008L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x800080000000000L);
      case 79:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xb009010000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000002080L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x100100000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 97:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc008060240000100L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x140100000020000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc04000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000020000004L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000090208000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000008L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800080000000000L);
      case 111:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xb009010000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000002080L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100100000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x3080038020000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x4900L);
      case 69:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800008801000004L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x10080L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000100000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x1080200000L);
      case 79:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x48000L);
      case 80:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         break;
      case 82:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x408000000000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x100002000000000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000c00000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x3080038020000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4900L);
      case 101:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800008801000004L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10080L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000100000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1080200000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x48000L);
      case 112:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         break;
      case 114:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x408000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100002000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x408002080000800L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1040120000004000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000080L);
      case 78:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 79:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 82:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80200040000L);
      case 83:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x408002080000800L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1040120000004000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000080L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 114:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80200040000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 68:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 79:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4040100000800000L);
      case 80:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         break;
      case 82:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x600100L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4040100000800000L);
      case 112:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         break;
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x600100L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x1404000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x40100000000000L);
      case 79:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 82:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000800000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1404000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40100000000000L);
      case 111:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000800000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100000800000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
         }
         break;
      case 83:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 9;
         }
         break;
      case 97:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100000800000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
         }
         break;
      case 115:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x804000L);
      case 82:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x804000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 12;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 79:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 12;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 97:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 12;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 12;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      case 97:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 16;
         }
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 16;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 92)
                     kind = 92;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(3);
                  break;
               case 8:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\53", "\55", "\52", "\57", 
"\136", "\53\53", "\55\55", "\74", "\74\75", "\76", "\76\75", "\75\75", "\41\75", 
"\174\174", "\46\46", "\41", "\75", "\173", "\175", "\50", "\51", "\56", "\54", "\73", 
"\72", "\52\52", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[10];
static private final int[] jjstateSet = new int[20];
static protected char curChar;
/** Constructor. */
public usqlTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public usqlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
